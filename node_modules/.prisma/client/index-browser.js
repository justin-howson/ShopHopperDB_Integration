
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.13.0
 * Query Engine version: efdf9b1183dddfd4258cd181a72125755215ab7b
 */
Prisma.prismaVersion = {
  client: "3.13.0",
  engine: "efdf9b1183dddfd4258cd181a72125755215ab7b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.TemplateClassScalarFieldEnum = makeEnum({
  id: 'id',
  class_name: 'class_name',
  items: 'items',
  isSet: 'isSet',
  submitted: 'submitted',
  updated_at: 'updated_at',
  created_at: 'created_at'
});

exports.Prisma.StatusScalarFieldEnum = makeEnum({
  id: 'id',
  updated_at: 'updated_at',
  products: 'products',
  business_name: 'business_name'
});

exports.Prisma.ShopScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  domain: 'domain',
  business_name: 'business_name',
  buckets: 'buckets',
  site_host: 'site_host',
  vertical: 'vertical',
  name: 'name',
  site: 'site',
  type: 'type',
  phone: 'phone',
  borough: 'borough',
  street: 'street',
  city: 'city',
  postal_code: 'postal_code',
  province: 'province',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  rating: 'rating',
  reviews: 'reviews',
  photo: 'photo',
  street_view: 'street_view',
  working_hours: 'working_hours',
  place_id: 'place_id',
  banner_image: 'banner_image',
  logo: 'logo',
  email: 'email',
  consumer_key: 'consumer_key',
  consumer_secret: 'consumer_secret',
  is_integrated: 'is_integrated',
  is_partner: 'is_partner',
  return_policy: 'return_policy'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  sh_id: 'sh_id',
  id: 'id',
  title: 'title',
  business_name: 'business_name',
  url: 'url',
  place_id: 'place_id',
  handle: 'handle',
  vendor: 'vendor',
  tags: 'tags',
  variants: 'variants',
  images: 'images',
  options: 'options',
  rating: 'rating',
  body_html: 'body_html',
  created_at: 'created_at',
  product_type: 'product_type',
  published_at: 'published_at',
  updated_at: 'updated_at',
  colors: 'colors',
  gender: 'gender',
  compare_at_price: 'compare_at_price',
  original_price: 'original_price',
  sizes: 'sizes',
  buckets: 'buckets',
  is_on_sale: 'is_on_sale',
  sale_ratio: 'sale_ratio',
  is_available: 'is_available'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  birthdate: 'birthdate',
  gender: 'gender',
  image: 'image',
  role: 'role',
  size: 'size',
  buckets: 'buckets',
  location: 'location',
  favourite: 'favourite',
  settings: 'settings',
  has_latest_app: 'has_latest_app',
  age_range: 'age_range',
  cart_ids: 'cart_ids',
  wish_list_ids: 'wish_list_ids'
});

exports.Prisma.SanitizationDataScalarFieldEnum = makeEnum({
  id: 'id',
  colors: 'colors',
  sizes: 'sizes',
  product_types: 'product_types'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
});

exports.Prisma.VerificationTokenScalarFieldEnum = makeEnum({
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
});

exports.Prisma.ShopifySessionScalarFieldEnum = makeEnum({
  id: 'id',
  sessionId: 'sessionId',
  sessionData: 'sessionData'
});

exports.Prisma.ShopifyShopScalarFieldEnum = makeEnum({
  id: 'id',
  shopifyShopId: 'shopifyShopId',
  domain: 'domain',
  name: 'name',
  country: 'country',
  city: 'city',
  storeAccessToken: 'storeAccessToken',
  accessToken: 'accessToken',
  onboardingCompleted: 'onboardingCompleted',
  onboardingInfoCompleted: 'onboardingInfoCompleted',
  termsAccepted: 'termsAccepted'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.TemplateClassOrderByRelevanceFieldEnum = makeEnum({
  class_name: 'class_name',
  items: 'items'
});

exports.Prisma.StatusOrderByRelevanceFieldEnum = makeEnum({
  business_name: 'business_name'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});

exports.Prisma.ShopOrderByRelevanceFieldEnum = makeEnum({
  domain: 'domain',
  business_name: 'business_name',
  buckets: 'buckets',
  site_host: 'site_host',
  vertical: 'vertical',
  name: 'name',
  site: 'site',
  type: 'type',
  phone: 'phone',
  borough: 'borough',
  street: 'street',
  city: 'city',
  postal_code: 'postal_code',
  province: 'province',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  rating: 'rating',
  reviews: 'reviews',
  photo: 'photo',
  street_view: 'street_view',
  place_id: 'place_id',
  banner_image: 'banner_image',
  logo: 'logo',
  email: 'email',
  consumer_key: 'consumer_key',
  consumer_secret: 'consumer_secret',
  is_integrated: 'is_integrated',
  return_policy: 'return_policy'
});

exports.Prisma.ProductOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  business_name: 'business_name',
  url: 'url',
  place_id: 'place_id',
  handle: 'handle',
  vendor: 'vendor',
  tags: 'tags',
  body_html: 'body_html',
  product_type: 'product_type',
  colors: 'colors',
  gender: 'gender',
  sizes: 'sizes',
  buckets: 'buckets'
});

exports.Prisma.UserOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  birthdate: 'birthdate',
  gender: 'gender',
  image: 'image',
  role: 'role',
  buckets: 'buckets',
  has_latest_app: 'has_latest_app',
  age_range: 'age_range',
  cart_ids: 'cart_ids',
  wish_list_ids: 'wish_list_ids'
});

exports.Prisma.SanitizationDataOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  colors: 'colors',
  sizes: 'sizes',
  product_types: 'product_types'
});

exports.Prisma.SessionOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
});

exports.Prisma.VerificationTokenOrderByRelevanceFieldEnum = makeEnum({
  identifier: 'identifier',
  token: 'token'
});

exports.Prisma.ShopifySessionOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  sessionId: 'sessionId',
  sessionData: 'sessionData'
});

exports.Prisma.ShopifyShopOrderByRelevanceFieldEnum = makeEnum({
  id: 'id',
  shopifyShopId: 'shopifyShopId',
  domain: 'domain',
  name: 'name',
  country: 'country',
  city: 'city',
  storeAccessToken: 'storeAccessToken',
  accessToken: 'accessToken'
});


exports.Prisma.ModelName = makeEnum({
  TemplateClass: 'TemplateClass',
  Status: 'Status',
  Shop: 'Shop',
  Product: 'Product',
  User: 'User',
  SanitizationData: 'SanitizationData',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  ShopifySession: 'ShopifySession',
  ShopifyShop: 'ShopifyShop'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
