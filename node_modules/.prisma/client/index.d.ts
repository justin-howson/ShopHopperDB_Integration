
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model TemplateClass
 * 
 */
export type TemplateClass = {
  id: number
  class_name: string
  items: string[]
  isSet: boolean
  submitted: boolean
  updated_at: Date
  created_at: Date
}

/**
 * Model Status
 * 
 */
export type Status = {
  id: number
  updated_at: Date
  products: number
  business_name: string
}

/**
 * Model Shop
 * 
 */
export type Shop = {
  id: number
  created_at: Date
  domain: string
  business_name: string
  buckets: string[]
  site_host: string | null
  vertical: string | null
  name: string | null
  site: string | null
  type: string | null
  phone: string | null
  borough: string | null
  street: string | null
  city: string | null
  postal_code: string | null
  province: string | null
  country: string | null
  latitude: string | null
  longitude: string | null
  rating: string | null
  reviews: string | null
  photo: string | null
  street_view: string | null
  working_hours: Prisma.JsonValue | null
  place_id: string | null
  banner_image: string | null
  logo: string | null
  email: string | null
  consumer_key: string | null
  consumer_secret: string | null
  is_integrated: string | null
  is_partner: boolean
  return_policy: string | null
}

/**
 * Model Product
 * 
 */
export type Product = {
  sh_id: number
  id: string
  title: string
  business_name: string | null
  url: string | null
  place_id: string | null
  handle: string | null
  vendor: string | null
  tags: string[]
  variants: Prisma.JsonValue | null
  images: Prisma.JsonValue | null
  options: Prisma.JsonValue | null
  rating: number | null
  body_html: string | null
  created_at: Date
  product_type: string | null
  published_at: Date
  updated_at: Date
  colors: string[]
  gender: string | null
  compare_at_price: number | null
  original_price: number | null
  sizes: string[]
  buckets: string[]
  is_on_sale: boolean | null
  sale_ratio: number | null
  is_available: boolean | null
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string | null
  emailVerified: Date | null
  password: string | null
  birthdate: string | null
  gender: string | null
  image: string | null
  role: string | null
  size: Prisma.JsonValue | null
  buckets: string[]
  location: Prisma.JsonValue | null
  favourite: Prisma.JsonValue | null
  settings: Prisma.JsonValue | null
  has_latest_app: string | null
  age_range: string | null
  cart_ids: string[]
  wish_list_ids: string[]
}

/**
 * Model SanitizationData
 * 
 */
export type SanitizationData = {
  id: string
  colors: string[]
  sizes: string[]
  product_types: string[]
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  sessionToken: string
  userId: string
  expires: Date
}

/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = {
  identifier: string
  token: string
  expires: Date
}

/**
 * Model ShopifySession
 * 
 */
export type ShopifySession = {
  id: string
  sessionId: string
  sessionData: string
}

/**
 * Model ShopifyShop
 * 
 */
export type ShopifyShop = {
  id: string
  shopifyShopId: string
  domain: string
  name: string
  country: string
  city: string
  storeAccessToken: string
  accessToken: string
  onboardingCompleted: boolean
  onboardingInfoCompleted: boolean
  termsAccepted: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TemplateClasses
 * const templateClasses = await prisma.templateClass.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TemplateClasses
   * const templateClasses = await prisma.templateClass.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: { maxWait?: number, timeout?: number }): Promise<R>;

      /**
   * `prisma.templateClass`: Exposes CRUD operations for the **TemplateClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TemplateClasses
    * const templateClasses = await prisma.templateClass.findMany()
    * ```
    */
  get templateClass(): Prisma.TemplateClassDelegate<GlobalReject>;

  /**
   * `prisma.status`: Exposes CRUD operations for the **Status** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Statuses
    * const statuses = await prisma.status.findMany()
    * ```
    */
  get status(): Prisma.StatusDelegate<GlobalReject>;

  /**
   * `prisma.shop`: Exposes CRUD operations for the **Shop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shops
    * const shops = await prisma.shop.findMany()
    * ```
    */
  get shop(): Prisma.ShopDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.sanitizationData`: Exposes CRUD operations for the **SanitizationData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SanitizationData
    * const sanitizationData = await prisma.sanitizationData.findMany()
    * ```
    */
  get sanitizationData(): Prisma.SanitizationDataDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<GlobalReject>;

  /**
   * `prisma.shopifySession`: Exposes CRUD operations for the **ShopifySession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopifySessions
    * const shopifySessions = await prisma.shopifySession.findMany()
    * ```
    */
  get shopifySession(): Prisma.ShopifySessionDelegate<GlobalReject>;

  /**
   * `prisma.shopifyShop`: Exposes CRUD operations for the **ShopifyShop** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShopifyShops
    * const shopifyShops = await prisma.shopifyShop.findMany()
    * ```
    */
  get shopifyShop(): Prisma.ShopifyShopDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.13.0
   * Query Engine version: efdf9b1183dddfd4258cd181a72125755215ab7b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    TemplateClass: 'TemplateClass',
    Status: 'Status',
    Shop: 'Shop',
    Product: 'Product',
    User: 'User',
    SanitizationData: 'SanitizationData',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    ShopifySession: 'ShopifySession',
    ShopifyShop: 'ShopifyShop'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;


  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sessions: number
  }

  export type UserCountOutputTypeSelect = {
    sessions?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model TemplateClass
   */


  export type AggregateTemplateClass = {
    _count: TemplateClassCountAggregateOutputType | null
    _avg: TemplateClassAvgAggregateOutputType | null
    _sum: TemplateClassSumAggregateOutputType | null
    _min: TemplateClassMinAggregateOutputType | null
    _max: TemplateClassMaxAggregateOutputType | null
  }

  export type TemplateClassAvgAggregateOutputType = {
    id: number | null
  }

  export type TemplateClassSumAggregateOutputType = {
    id: number | null
  }

  export type TemplateClassMinAggregateOutputType = {
    id: number | null
    class_name: string | null
    isSet: boolean | null
    submitted: boolean | null
    updated_at: Date | null
    created_at: Date | null
  }

  export type TemplateClassMaxAggregateOutputType = {
    id: number | null
    class_name: string | null
    isSet: boolean | null
    submitted: boolean | null
    updated_at: Date | null
    created_at: Date | null
  }

  export type TemplateClassCountAggregateOutputType = {
    id: number
    class_name: number
    items: number
    isSet: number
    submitted: number
    updated_at: number
    created_at: number
    _all: number
  }


  export type TemplateClassAvgAggregateInputType = {
    id?: true
  }

  export type TemplateClassSumAggregateInputType = {
    id?: true
  }

  export type TemplateClassMinAggregateInputType = {
    id?: true
    class_name?: true
    isSet?: true
    submitted?: true
    updated_at?: true
    created_at?: true
  }

  export type TemplateClassMaxAggregateInputType = {
    id?: true
    class_name?: true
    isSet?: true
    submitted?: true
    updated_at?: true
    created_at?: true
  }

  export type TemplateClassCountAggregateInputType = {
    id?: true
    class_name?: true
    items?: true
    isSet?: true
    submitted?: true
    updated_at?: true
    created_at?: true
    _all?: true
  }

  export type TemplateClassAggregateArgs = {
    /**
     * Filter which TemplateClass to aggregate.
     * 
    **/
    where?: TemplateClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateClasses to fetch.
     * 
    **/
    orderBy?: Enumerable<TemplateClassOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TemplateClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateClasses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateClasses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TemplateClasses
    **/
    _count?: true | TemplateClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemplateClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemplateClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateClassMaxAggregateInputType
  }

  export type GetTemplateClassAggregateType<T extends TemplateClassAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplateClass[P]>
      : GetScalarType<T[P], AggregateTemplateClass[P]>
  }




  export type TemplateClassGroupByArgs = {
    where?: TemplateClassWhereInput
    orderBy?: Enumerable<TemplateClassOrderByWithAggregationInput>
    by: Array<TemplateClassScalarFieldEnum>
    having?: TemplateClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateClassCountAggregateInputType | true
    _avg?: TemplateClassAvgAggregateInputType
    _sum?: TemplateClassSumAggregateInputType
    _min?: TemplateClassMinAggregateInputType
    _max?: TemplateClassMaxAggregateInputType
  }


  export type TemplateClassGroupByOutputType = {
    id: number
    class_name: string
    items: string[]
    isSet: boolean
    submitted: boolean
    updated_at: Date
    created_at: Date
    _count: TemplateClassCountAggregateOutputType | null
    _avg: TemplateClassAvgAggregateOutputType | null
    _sum: TemplateClassSumAggregateOutputType | null
    _min: TemplateClassMinAggregateOutputType | null
    _max: TemplateClassMaxAggregateOutputType | null
  }

  type GetTemplateClassGroupByPayload<T extends TemplateClassGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TemplateClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateClassGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateClassGroupByOutputType[P]>
        }
      >
    >


  export type TemplateClassSelect = {
    id?: boolean
    class_name?: boolean
    items?: boolean
    isSet?: boolean
    submitted?: boolean
    updated_at?: boolean
    created_at?: boolean
  }

  export type TemplateClassGetPayload<
    S extends boolean | null | undefined | TemplateClassArgs,
    U = keyof S
      > = S extends true
        ? TemplateClass
    : S extends undefined
    ? never
    : S extends TemplateClassArgs | TemplateClassFindManyArgs
    ?'include' extends U
    ? TemplateClass 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TemplateClass ? TemplateClass[P] : never
  } 
    : TemplateClass
  : TemplateClass


  type TemplateClassCountArgs = Merge<
    Omit<TemplateClassFindManyArgs, 'select' | 'include'> & {
      select?: TemplateClassCountAggregateInputType | true
    }
  >

  export interface TemplateClassDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TemplateClass that matches the filter.
     * @param {TemplateClassFindUniqueArgs} args - Arguments to find a TemplateClass
     * @example
     * // Get one TemplateClass
     * const templateClass = await prisma.templateClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TemplateClassFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TemplateClassFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TemplateClass'> extends True ? CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>> : CheckSelect<T, Prisma__TemplateClassClient<TemplateClass | null >, Prisma__TemplateClassClient<TemplateClassGetPayload<T> | null >>

    /**
     * Find the first TemplateClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassFindFirstArgs} args - Arguments to find a TemplateClass
     * @example
     * // Get one TemplateClass
     * const templateClass = await prisma.templateClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TemplateClassFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TemplateClassFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TemplateClass'> extends True ? CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>> : CheckSelect<T, Prisma__TemplateClassClient<TemplateClass | null >, Prisma__TemplateClassClient<TemplateClassGetPayload<T> | null >>

    /**
     * Find zero or more TemplateClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TemplateClasses
     * const templateClasses = await prisma.templateClass.findMany()
     * 
     * // Get first 10 TemplateClasses
     * const templateClasses = await prisma.templateClass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateClassWithIdOnly = await prisma.templateClass.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TemplateClassFindManyArgs>(
      args?: SelectSubset<T, TemplateClassFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TemplateClass>>, PrismaPromise<Array<TemplateClassGetPayload<T>>>>

    /**
     * Create a TemplateClass.
     * @param {TemplateClassCreateArgs} args - Arguments to create a TemplateClass.
     * @example
     * // Create one TemplateClass
     * const TemplateClass = await prisma.templateClass.create({
     *   data: {
     *     // ... data to create a TemplateClass
     *   }
     * })
     * 
    **/
    create<T extends TemplateClassCreateArgs>(
      args: SelectSubset<T, TemplateClassCreateArgs>
    ): CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>>

    /**
     * Create many TemplateClasses.
     *     @param {TemplateClassCreateManyArgs} args - Arguments to create many TemplateClasses.
     *     @example
     *     // Create many TemplateClasses
     *     const templateClass = await prisma.templateClass.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TemplateClassCreateManyArgs>(
      args?: SelectSubset<T, TemplateClassCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TemplateClass.
     * @param {TemplateClassDeleteArgs} args - Arguments to delete one TemplateClass.
     * @example
     * // Delete one TemplateClass
     * const TemplateClass = await prisma.templateClass.delete({
     *   where: {
     *     // ... filter to delete one TemplateClass
     *   }
     * })
     * 
    **/
    delete<T extends TemplateClassDeleteArgs>(
      args: SelectSubset<T, TemplateClassDeleteArgs>
    ): CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>>

    /**
     * Update one TemplateClass.
     * @param {TemplateClassUpdateArgs} args - Arguments to update one TemplateClass.
     * @example
     * // Update one TemplateClass
     * const templateClass = await prisma.templateClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TemplateClassUpdateArgs>(
      args: SelectSubset<T, TemplateClassUpdateArgs>
    ): CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>>

    /**
     * Delete zero or more TemplateClasses.
     * @param {TemplateClassDeleteManyArgs} args - Arguments to filter TemplateClasses to delete.
     * @example
     * // Delete a few TemplateClasses
     * const { count } = await prisma.templateClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TemplateClassDeleteManyArgs>(
      args?: SelectSubset<T, TemplateClassDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TemplateClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TemplateClasses
     * const templateClass = await prisma.templateClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TemplateClassUpdateManyArgs>(
      args: SelectSubset<T, TemplateClassUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TemplateClass.
     * @param {TemplateClassUpsertArgs} args - Arguments to update or create a TemplateClass.
     * @example
     * // Update or create a TemplateClass
     * const templateClass = await prisma.templateClass.upsert({
     *   create: {
     *     // ... data to create a TemplateClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TemplateClass we want to update
     *   }
     * })
    **/
    upsert<T extends TemplateClassUpsertArgs>(
      args: SelectSubset<T, TemplateClassUpsertArgs>
    ): CheckSelect<T, Prisma__TemplateClassClient<TemplateClass>, Prisma__TemplateClassClient<TemplateClassGetPayload<T>>>

    /**
     * Count the number of TemplateClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassCountArgs} args - Arguments to filter TemplateClasses to count.
     * @example
     * // Count the number of TemplateClasses
     * const count = await prisma.templateClass.count({
     *   where: {
     *     // ... the filter for the TemplateClasses we want to count
     *   }
     * })
    **/
    count<T extends TemplateClassCountArgs>(
      args?: Subset<T, TemplateClassCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TemplateClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateClassAggregateArgs>(args: Subset<T, TemplateClassAggregateArgs>): PrismaPromise<GetTemplateClassAggregateType<T>>

    /**
     * Group by TemplateClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateClassGroupByArgs['orderBy'] }
        : { orderBy?: TemplateClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateClassGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TemplateClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TemplateClassClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TemplateClass findUnique
   */
  export type TemplateClassFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * Throw an Error if a TemplateClass can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TemplateClass to fetch.
     * 
    **/
    where: TemplateClassWhereUniqueInput
  }


  /**
   * TemplateClass findFirst
   */
  export type TemplateClassFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * Throw an Error if a TemplateClass can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TemplateClass to fetch.
     * 
    **/
    where?: TemplateClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateClasses to fetch.
     * 
    **/
    orderBy?: Enumerable<TemplateClassOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TemplateClasses.
     * 
    **/
    cursor?: TemplateClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateClasses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateClasses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TemplateClasses.
     * 
    **/
    distinct?: Enumerable<TemplateClassScalarFieldEnum>
  }


  /**
   * TemplateClass findMany
   */
  export type TemplateClassFindManyArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * Filter, which TemplateClasses to fetch.
     * 
    **/
    where?: TemplateClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TemplateClasses to fetch.
     * 
    **/
    orderBy?: Enumerable<TemplateClassOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TemplateClasses.
     * 
    **/
    cursor?: TemplateClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TemplateClasses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TemplateClasses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TemplateClassScalarFieldEnum>
  }


  /**
   * TemplateClass create
   */
  export type TemplateClassCreateArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * The data needed to create a TemplateClass.
     * 
    **/
    data: XOR<TemplateClassCreateInput, TemplateClassUncheckedCreateInput>
  }


  /**
   * TemplateClass createMany
   */
  export type TemplateClassCreateManyArgs = {
    /**
     * The data used to create many TemplateClasses.
     * 
    **/
    data: Enumerable<TemplateClassCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TemplateClass update
   */
  export type TemplateClassUpdateArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * The data needed to update a TemplateClass.
     * 
    **/
    data: XOR<TemplateClassUpdateInput, TemplateClassUncheckedUpdateInput>
    /**
     * Choose, which TemplateClass to update.
     * 
    **/
    where: TemplateClassWhereUniqueInput
  }


  /**
   * TemplateClass updateMany
   */
  export type TemplateClassUpdateManyArgs = {
    /**
     * The data used to update TemplateClasses.
     * 
    **/
    data: XOR<TemplateClassUpdateManyMutationInput, TemplateClassUncheckedUpdateManyInput>
    /**
     * Filter which TemplateClasses to update
     * 
    **/
    where?: TemplateClassWhereInput
  }


  /**
   * TemplateClass upsert
   */
  export type TemplateClassUpsertArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * The filter to search for the TemplateClass to update in case it exists.
     * 
    **/
    where: TemplateClassWhereUniqueInput
    /**
     * In case the TemplateClass found by the `where` argument doesn't exist, create a new TemplateClass with this data.
     * 
    **/
    create: XOR<TemplateClassCreateInput, TemplateClassUncheckedCreateInput>
    /**
     * In case the TemplateClass was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TemplateClassUpdateInput, TemplateClassUncheckedUpdateInput>
  }


  /**
   * TemplateClass delete
   */
  export type TemplateClassDeleteArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
    /**
     * Filter which TemplateClass to delete.
     * 
    **/
    where: TemplateClassWhereUniqueInput
  }


  /**
   * TemplateClass deleteMany
   */
  export type TemplateClassDeleteManyArgs = {
    /**
     * Filter which TemplateClasses to delete
     * 
    **/
    where?: TemplateClassWhereInput
  }


  /**
   * TemplateClass without action
   */
  export type TemplateClassArgs = {
    /**
     * Select specific fields to fetch from the TemplateClass
     * 
    **/
    select?: TemplateClassSelect | null
  }



  /**
   * Model Status
   */


  export type AggregateStatus = {
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  export type StatusAvgAggregateOutputType = {
    id: number | null
    products: number | null
  }

  export type StatusSumAggregateOutputType = {
    id: number | null
    products: number | null
  }

  export type StatusMinAggregateOutputType = {
    id: number | null
    updated_at: Date | null
    products: number | null
    business_name: string | null
  }

  export type StatusMaxAggregateOutputType = {
    id: number | null
    updated_at: Date | null
    products: number | null
    business_name: string | null
  }

  export type StatusCountAggregateOutputType = {
    id: number
    updated_at: number
    products: number
    business_name: number
    _all: number
  }


  export type StatusAvgAggregateInputType = {
    id?: true
    products?: true
  }

  export type StatusSumAggregateInputType = {
    id?: true
    products?: true
  }

  export type StatusMinAggregateInputType = {
    id?: true
    updated_at?: true
    products?: true
    business_name?: true
  }

  export type StatusMaxAggregateInputType = {
    id?: true
    updated_at?: true
    products?: true
    business_name?: true
  }

  export type StatusCountAggregateInputType = {
    id?: true
    updated_at?: true
    products?: true
    business_name?: true
    _all?: true
  }

  export type StatusAggregateArgs = {
    /**
     * Filter which Status to aggregate.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Statuses
    **/
    _count?: true | StatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusMaxAggregateInputType
  }

  export type GetStatusAggregateType<T extends StatusAggregateArgs> = {
        [P in keyof T & keyof AggregateStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatus[P]>
      : GetScalarType<T[P], AggregateStatus[P]>
  }




  export type StatusGroupByArgs = {
    where?: StatusWhereInput
    orderBy?: Enumerable<StatusOrderByWithAggregationInput>
    by: Array<StatusScalarFieldEnum>
    having?: StatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusCountAggregateInputType | true
    _avg?: StatusAvgAggregateInputType
    _sum?: StatusSumAggregateInputType
    _min?: StatusMinAggregateInputType
    _max?: StatusMaxAggregateInputType
  }


  export type StatusGroupByOutputType = {
    id: number
    updated_at: Date
    products: number
    business_name: string
    _count: StatusCountAggregateOutputType | null
    _avg: StatusAvgAggregateOutputType | null
    _sum: StatusSumAggregateOutputType | null
    _min: StatusMinAggregateOutputType | null
    _max: StatusMaxAggregateOutputType | null
  }

  type GetStatusGroupByPayload<T extends StatusGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusGroupByOutputType[P]>
            : GetScalarType<T[P], StatusGroupByOutputType[P]>
        }
      >
    >


  export type StatusSelect = {
    id?: boolean
    updated_at?: boolean
    products?: boolean
    business_name?: boolean
  }

  export type StatusGetPayload<
    S extends boolean | null | undefined | StatusArgs,
    U = keyof S
      > = S extends true
        ? Status
    : S extends undefined
    ? never
    : S extends StatusArgs | StatusFindManyArgs
    ?'include' extends U
    ? Status 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Status ? Status[P] : never
  } 
    : Status
  : Status


  type StatusCountArgs = Merge<
    Omit<StatusFindManyArgs, 'select' | 'include'> & {
      select?: StatusCountAggregateInputType | true
    }
  >

  export interface StatusDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Status that matches the filter.
     * @param {StatusFindUniqueArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Status'> extends True ? CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>> : CheckSelect<T, Prisma__StatusClient<Status | null >, Prisma__StatusClient<StatusGetPayload<T> | null >>

    /**
     * Find the first Status that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindFirstArgs} args - Arguments to find a Status
     * @example
     * // Get one Status
     * const status = await prisma.status.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Status'> extends True ? CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>> : CheckSelect<T, Prisma__StatusClient<Status | null >, Prisma__StatusClient<StatusGetPayload<T> | null >>

    /**
     * Find zero or more Statuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Statuses
     * const statuses = await prisma.status.findMany()
     * 
     * // Get first 10 Statuses
     * const statuses = await prisma.status.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusWithIdOnly = await prisma.status.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatusFindManyArgs>(
      args?: SelectSubset<T, StatusFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Status>>, PrismaPromise<Array<StatusGetPayload<T>>>>

    /**
     * Create a Status.
     * @param {StatusCreateArgs} args - Arguments to create a Status.
     * @example
     * // Create one Status
     * const Status = await prisma.status.create({
     *   data: {
     *     // ... data to create a Status
     *   }
     * })
     * 
    **/
    create<T extends StatusCreateArgs>(
      args: SelectSubset<T, StatusCreateArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Create many Statuses.
     *     @param {StatusCreateManyArgs} args - Arguments to create many Statuses.
     *     @example
     *     // Create many Statuses
     *     const status = await prisma.status.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatusCreateManyArgs>(
      args?: SelectSubset<T, StatusCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Status.
     * @param {StatusDeleteArgs} args - Arguments to delete one Status.
     * @example
     * // Delete one Status
     * const Status = await prisma.status.delete({
     *   where: {
     *     // ... filter to delete one Status
     *   }
     * })
     * 
    **/
    delete<T extends StatusDeleteArgs>(
      args: SelectSubset<T, StatusDeleteArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Update one Status.
     * @param {StatusUpdateArgs} args - Arguments to update one Status.
     * @example
     * // Update one Status
     * const status = await prisma.status.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatusUpdateArgs>(
      args: SelectSubset<T, StatusUpdateArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Delete zero or more Statuses.
     * @param {StatusDeleteManyArgs} args - Arguments to filter Statuses to delete.
     * @example
     * // Delete a few Statuses
     * const { count } = await prisma.status.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatusDeleteManyArgs>(
      args?: SelectSubset<T, StatusDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Statuses
     * const status = await prisma.status.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatusUpdateManyArgs>(
      args: SelectSubset<T, StatusUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Status.
     * @param {StatusUpsertArgs} args - Arguments to update or create a Status.
     * @example
     * // Update or create a Status
     * const status = await prisma.status.upsert({
     *   create: {
     *     // ... data to create a Status
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Status we want to update
     *   }
     * })
    **/
    upsert<T extends StatusUpsertArgs>(
      args: SelectSubset<T, StatusUpsertArgs>
    ): CheckSelect<T, Prisma__StatusClient<Status>, Prisma__StatusClient<StatusGetPayload<T>>>

    /**
     * Count the number of Statuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusCountArgs} args - Arguments to filter Statuses to count.
     * @example
     * // Count the number of Statuses
     * const count = await prisma.status.count({
     *   where: {
     *     // ... the filter for the Statuses we want to count
     *   }
     * })
    **/
    count<T extends StatusCountArgs>(
      args?: Subset<T, StatusCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusAggregateArgs>(args: Subset<T, StatusAggregateArgs>): PrismaPromise<GetStatusAggregateType<T>>

    /**
     * Group by Status.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusGroupByArgs['orderBy'] }
        : { orderBy?: StatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Status.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatusClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Status findUnique
   */
  export type StatusFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Throw an Error if a Status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Status to fetch.
     * 
    **/
    where: StatusWhereUniqueInput
  }


  /**
   * Status findFirst
   */
  export type StatusFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Throw an Error if a Status can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Status to fetch.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Statuses.
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Statuses.
     * 
    **/
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Status findMany
   */
  export type StatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Filter, which Statuses to fetch.
     * 
    **/
    where?: StatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Statuses to fetch.
     * 
    **/
    orderBy?: Enumerable<StatusOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Statuses.
     * 
    **/
    cursor?: StatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Statuses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Statuses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatusScalarFieldEnum>
  }


  /**
   * Status create
   */
  export type StatusCreateArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * The data needed to create a Status.
     * 
    **/
    data: XOR<StatusCreateInput, StatusUncheckedCreateInput>
  }


  /**
   * Status createMany
   */
  export type StatusCreateManyArgs = {
    /**
     * The data used to create many Statuses.
     * 
    **/
    data: Enumerable<StatusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Status update
   */
  export type StatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * The data needed to update a Status.
     * 
    **/
    data: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
    /**
     * Choose, which Status to update.
     * 
    **/
    where: StatusWhereUniqueInput
  }


  /**
   * Status updateMany
   */
  export type StatusUpdateManyArgs = {
    /**
     * The data used to update Statuses.
     * 
    **/
    data: XOR<StatusUpdateManyMutationInput, StatusUncheckedUpdateManyInput>
    /**
     * Filter which Statuses to update
     * 
    **/
    where?: StatusWhereInput
  }


  /**
   * Status upsert
   */
  export type StatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * The filter to search for the Status to update in case it exists.
     * 
    **/
    where: StatusWhereUniqueInput
    /**
     * In case the Status found by the `where` argument doesn't exist, create a new Status with this data.
     * 
    **/
    create: XOR<StatusCreateInput, StatusUncheckedCreateInput>
    /**
     * In case the Status was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatusUpdateInput, StatusUncheckedUpdateInput>
  }


  /**
   * Status delete
   */
  export type StatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
    /**
     * Filter which Status to delete.
     * 
    **/
    where: StatusWhereUniqueInput
  }


  /**
   * Status deleteMany
   */
  export type StatusDeleteManyArgs = {
    /**
     * Filter which Statuses to delete
     * 
    **/
    where?: StatusWhereInput
  }


  /**
   * Status without action
   */
  export type StatusArgs = {
    /**
     * Select specific fields to fetch from the Status
     * 
    **/
    select?: StatusSelect | null
  }



  /**
   * Model Shop
   */


  export type AggregateShop = {
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  export type ShopAvgAggregateOutputType = {
    id: number | null
  }

  export type ShopSumAggregateOutputType = {
    id: number | null
  }

  export type ShopMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    domain: string | null
    business_name: string | null
    site_host: string | null
    vertical: string | null
    name: string | null
    site: string | null
    type: string | null
    phone: string | null
    borough: string | null
    street: string | null
    city: string | null
    postal_code: string | null
    province: string | null
    country: string | null
    latitude: string | null
    longitude: string | null
    rating: string | null
    reviews: string | null
    photo: string | null
    street_view: string | null
    place_id: string | null
    banner_image: string | null
    logo: string | null
    email: string | null
    consumer_key: string | null
    consumer_secret: string | null
    is_integrated: string | null
    is_partner: boolean | null
    return_policy: string | null
  }

  export type ShopMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    domain: string | null
    business_name: string | null
    site_host: string | null
    vertical: string | null
    name: string | null
    site: string | null
    type: string | null
    phone: string | null
    borough: string | null
    street: string | null
    city: string | null
    postal_code: string | null
    province: string | null
    country: string | null
    latitude: string | null
    longitude: string | null
    rating: string | null
    reviews: string | null
    photo: string | null
    street_view: string | null
    place_id: string | null
    banner_image: string | null
    logo: string | null
    email: string | null
    consumer_key: string | null
    consumer_secret: string | null
    is_integrated: string | null
    is_partner: boolean | null
    return_policy: string | null
  }

  export type ShopCountAggregateOutputType = {
    id: number
    created_at: number
    domain: number
    business_name: number
    buckets: number
    site_host: number
    vertical: number
    name: number
    site: number
    type: number
    phone: number
    borough: number
    street: number
    city: number
    postal_code: number
    province: number
    country: number
    latitude: number
    longitude: number
    rating: number
    reviews: number
    photo: number
    street_view: number
    working_hours: number
    place_id: number
    banner_image: number
    logo: number
    email: number
    consumer_key: number
    consumer_secret: number
    is_integrated: number
    is_partner: number
    return_policy: number
    _all: number
  }


  export type ShopAvgAggregateInputType = {
    id?: true
  }

  export type ShopSumAggregateInputType = {
    id?: true
  }

  export type ShopMinAggregateInputType = {
    id?: true
    created_at?: true
    domain?: true
    business_name?: true
    site_host?: true
    vertical?: true
    name?: true
    site?: true
    type?: true
    phone?: true
    borough?: true
    street?: true
    city?: true
    postal_code?: true
    province?: true
    country?: true
    latitude?: true
    longitude?: true
    rating?: true
    reviews?: true
    photo?: true
    street_view?: true
    place_id?: true
    banner_image?: true
    logo?: true
    email?: true
    consumer_key?: true
    consumer_secret?: true
    is_integrated?: true
    is_partner?: true
    return_policy?: true
  }

  export type ShopMaxAggregateInputType = {
    id?: true
    created_at?: true
    domain?: true
    business_name?: true
    site_host?: true
    vertical?: true
    name?: true
    site?: true
    type?: true
    phone?: true
    borough?: true
    street?: true
    city?: true
    postal_code?: true
    province?: true
    country?: true
    latitude?: true
    longitude?: true
    rating?: true
    reviews?: true
    photo?: true
    street_view?: true
    place_id?: true
    banner_image?: true
    logo?: true
    email?: true
    consumer_key?: true
    consumer_secret?: true
    is_integrated?: true
    is_partner?: true
    return_policy?: true
  }

  export type ShopCountAggregateInputType = {
    id?: true
    created_at?: true
    domain?: true
    business_name?: true
    buckets?: true
    site_host?: true
    vertical?: true
    name?: true
    site?: true
    type?: true
    phone?: true
    borough?: true
    street?: true
    city?: true
    postal_code?: true
    province?: true
    country?: true
    latitude?: true
    longitude?: true
    rating?: true
    reviews?: true
    photo?: true
    street_view?: true
    working_hours?: true
    place_id?: true
    banner_image?: true
    logo?: true
    email?: true
    consumer_key?: true
    consumer_secret?: true
    is_integrated?: true
    is_partner?: true
    return_policy?: true
    _all?: true
  }

  export type ShopAggregateArgs = {
    /**
     * Filter which Shop to aggregate.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shops
    **/
    _count?: true | ShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShopAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShopSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopMaxAggregateInputType
  }

  export type GetShopAggregateType<T extends ShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShop[P]>
      : GetScalarType<T[P], AggregateShop[P]>
  }




  export type ShopGroupByArgs = {
    where?: ShopWhereInput
    orderBy?: Enumerable<ShopOrderByWithAggregationInput>
    by: Array<ShopScalarFieldEnum>
    having?: ShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopCountAggregateInputType | true
    _avg?: ShopAvgAggregateInputType
    _sum?: ShopSumAggregateInputType
    _min?: ShopMinAggregateInputType
    _max?: ShopMaxAggregateInputType
  }


  export type ShopGroupByOutputType = {
    id: number
    created_at: Date
    domain: string
    business_name: string
    buckets: string[]
    site_host: string | null
    vertical: string | null
    name: string | null
    site: string | null
    type: string | null
    phone: string | null
    borough: string | null
    street: string | null
    city: string | null
    postal_code: string | null
    province: string | null
    country: string | null
    latitude: string | null
    longitude: string | null
    rating: string | null
    reviews: string | null
    photo: string | null
    street_view: string | null
    working_hours: JsonValue | null
    place_id: string | null
    banner_image: string | null
    logo: string | null
    email: string | null
    consumer_key: string | null
    consumer_secret: string | null
    is_integrated: string | null
    is_partner: boolean
    return_policy: string | null
    _count: ShopCountAggregateOutputType | null
    _avg: ShopAvgAggregateOutputType | null
    _sum: ShopSumAggregateOutputType | null
    _min: ShopMinAggregateOutputType | null
    _max: ShopMaxAggregateOutputType | null
  }

  type GetShopGroupByPayload<T extends ShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopSelect = {
    id?: boolean
    created_at?: boolean
    domain?: boolean
    business_name?: boolean
    buckets?: boolean
    site_host?: boolean
    vertical?: boolean
    name?: boolean
    site?: boolean
    type?: boolean
    phone?: boolean
    borough?: boolean
    street?: boolean
    city?: boolean
    postal_code?: boolean
    province?: boolean
    country?: boolean
    latitude?: boolean
    longitude?: boolean
    rating?: boolean
    reviews?: boolean
    photo?: boolean
    street_view?: boolean
    working_hours?: boolean
    place_id?: boolean
    banner_image?: boolean
    logo?: boolean
    email?: boolean
    consumer_key?: boolean
    consumer_secret?: boolean
    is_integrated?: boolean
    is_partner?: boolean
    return_policy?: boolean
  }

  export type ShopGetPayload<
    S extends boolean | null | undefined | ShopArgs,
    U = keyof S
      > = S extends true
        ? Shop
    : S extends undefined
    ? never
    : S extends ShopArgs | ShopFindManyArgs
    ?'include' extends U
    ? Shop 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Shop ? Shop[P] : never
  } 
    : Shop
  : Shop


  type ShopCountArgs = Merge<
    Omit<ShopFindManyArgs, 'select' | 'include'> & {
      select?: ShopCountAggregateInputType | true
    }
  >

  export interface ShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Shop that matches the filter.
     * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find the first Shop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindFirstArgs} args - Arguments to find a Shop
     * @example
     * // Get one Shop
     * const shop = await prisma.shop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Shop'> extends True ? CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopClient<Shop | null >, Prisma__ShopClient<ShopGetPayload<T> | null >>

    /**
     * Find zero or more Shops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shops
     * const shops = await prisma.shop.findMany()
     * 
     * // Get first 10 Shops
     * const shops = await prisma.shop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopFindManyArgs>(
      args?: SelectSubset<T, ShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Shop>>, PrismaPromise<Array<ShopGetPayload<T>>>>

    /**
     * Create a Shop.
     * @param {ShopCreateArgs} args - Arguments to create a Shop.
     * @example
     * // Create one Shop
     * const Shop = await prisma.shop.create({
     *   data: {
     *     // ... data to create a Shop
     *   }
     * })
     * 
    **/
    create<T extends ShopCreateArgs>(
      args: SelectSubset<T, ShopCreateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Create many Shops.
     *     @param {ShopCreateManyArgs} args - Arguments to create many Shops.
     *     @example
     *     // Create many Shops
     *     const shop = await prisma.shop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopCreateManyArgs>(
      args?: SelectSubset<T, ShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shop.
     * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
     * @example
     * // Delete one Shop
     * const Shop = await prisma.shop.delete({
     *   where: {
     *     // ... filter to delete one Shop
     *   }
     * })
     * 
    **/
    delete<T extends ShopDeleteArgs>(
      args: SelectSubset<T, ShopDeleteArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Update one Shop.
     * @param {ShopUpdateArgs} args - Arguments to update one Shop.
     * @example
     * // Update one Shop
     * const shop = await prisma.shop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopUpdateArgs>(
      args: SelectSubset<T, ShopUpdateArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Delete zero or more Shops.
     * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
     * @example
     * // Delete a few Shops
     * const { count } = await prisma.shop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopDeleteManyArgs>(
      args?: SelectSubset<T, ShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shops
     * const shop = await prisma.shop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopUpdateManyArgs>(
      args: SelectSubset<T, ShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shop.
     * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
     * @example
     * // Update or create a Shop
     * const shop = await prisma.shop.upsert({
     *   create: {
     *     // ... data to create a Shop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shop we want to update
     *   }
     * })
    **/
    upsert<T extends ShopUpsertArgs>(
      args: SelectSubset<T, ShopUpsertArgs>
    ): CheckSelect<T, Prisma__ShopClient<Shop>, Prisma__ShopClient<ShopGetPayload<T>>>

    /**
     * Count the number of Shops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopCountArgs} args - Arguments to filter Shops to count.
     * @example
     * // Count the number of Shops
     * const count = await prisma.shop.count({
     *   where: {
     *     // ... the filter for the Shops we want to count
     *   }
     * })
    **/
    count<T extends ShopCountArgs>(
      args?: Subset<T, ShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopAggregateArgs>(args: Subset<T, ShopAggregateArgs>): PrismaPromise<GetShopAggregateType<T>>

    /**
     * Group by Shop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Shop findUnique
   */
  export type ShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop findFirst
   */
  export type ShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Throw an Error if a Shop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Shop to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shops.
     * 
    **/
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop findMany
   */
  export type ShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Filter, which Shops to fetch.
     * 
    **/
    where?: ShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shops.
     * 
    **/
    cursor?: ShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopScalarFieldEnum>
  }


  /**
   * Shop create
   */
  export type ShopCreateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * The data needed to create a Shop.
     * 
    **/
    data: XOR<ShopCreateInput, ShopUncheckedCreateInput>
  }


  /**
   * Shop createMany
   */
  export type ShopCreateManyArgs = {
    /**
     * The data used to create many Shops.
     * 
    **/
    data: Enumerable<ShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Shop update
   */
  export type ShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * The data needed to update a Shop.
     * 
    **/
    data: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
    /**
     * Choose, which Shop to update.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop updateMany
   */
  export type ShopUpdateManyArgs = {
    /**
     * The data used to update Shops.
     * 
    **/
    data: XOR<ShopUpdateManyMutationInput, ShopUncheckedUpdateManyInput>
    /**
     * Filter which Shops to update
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop upsert
   */
  export type ShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * The filter to search for the Shop to update in case it exists.
     * 
    **/
    where: ShopWhereUniqueInput
    /**
     * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
     * 
    **/
    create: XOR<ShopCreateInput, ShopUncheckedCreateInput>
    /**
     * In case the Shop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopUpdateInput, ShopUncheckedUpdateInput>
  }


  /**
   * Shop delete
   */
  export type ShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
    /**
     * Filter which Shop to delete.
     * 
    **/
    where: ShopWhereUniqueInput
  }


  /**
   * Shop deleteMany
   */
  export type ShopDeleteManyArgs = {
    /**
     * Filter which Shops to delete
     * 
    **/
    where?: ShopWhereInput
  }


  /**
   * Shop without action
   */
  export type ShopArgs = {
    /**
     * Select specific fields to fetch from the Shop
     * 
    **/
    select?: ShopSelect | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    sh_id: number | null
    rating: number | null
    compare_at_price: number | null
    original_price: number | null
    sale_ratio: number | null
  }

  export type ProductSumAggregateOutputType = {
    sh_id: number | null
    rating: number | null
    compare_at_price: number | null
    original_price: number | null
    sale_ratio: number | null
  }

  export type ProductMinAggregateOutputType = {
    sh_id: number | null
    id: string | null
    title: string | null
    business_name: string | null
    url: string | null
    place_id: string | null
    handle: string | null
    vendor: string | null
    rating: number | null
    body_html: string | null
    created_at: Date | null
    product_type: string | null
    published_at: Date | null
    updated_at: Date | null
    gender: string | null
    compare_at_price: number | null
    original_price: number | null
    is_on_sale: boolean | null
    sale_ratio: number | null
    is_available: boolean | null
  }

  export type ProductMaxAggregateOutputType = {
    sh_id: number | null
    id: string | null
    title: string | null
    business_name: string | null
    url: string | null
    place_id: string | null
    handle: string | null
    vendor: string | null
    rating: number | null
    body_html: string | null
    created_at: Date | null
    product_type: string | null
    published_at: Date | null
    updated_at: Date | null
    gender: string | null
    compare_at_price: number | null
    original_price: number | null
    is_on_sale: boolean | null
    sale_ratio: number | null
    is_available: boolean | null
  }

  export type ProductCountAggregateOutputType = {
    sh_id: number
    id: number
    title: number
    business_name: number
    url: number
    place_id: number
    handle: number
    vendor: number
    tags: number
    variants: number
    images: number
    options: number
    rating: number
    body_html: number
    created_at: number
    product_type: number
    published_at: number
    updated_at: number
    colors: number
    gender: number
    compare_at_price: number
    original_price: number
    sizes: number
    buckets: number
    is_on_sale: number
    sale_ratio: number
    is_available: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    sh_id?: true
    rating?: true
    compare_at_price?: true
    original_price?: true
    sale_ratio?: true
  }

  export type ProductSumAggregateInputType = {
    sh_id?: true
    rating?: true
    compare_at_price?: true
    original_price?: true
    sale_ratio?: true
  }

  export type ProductMinAggregateInputType = {
    sh_id?: true
    id?: true
    title?: true
    business_name?: true
    url?: true
    place_id?: true
    handle?: true
    vendor?: true
    rating?: true
    body_html?: true
    created_at?: true
    product_type?: true
    published_at?: true
    updated_at?: true
    gender?: true
    compare_at_price?: true
    original_price?: true
    is_on_sale?: true
    sale_ratio?: true
    is_available?: true
  }

  export type ProductMaxAggregateInputType = {
    sh_id?: true
    id?: true
    title?: true
    business_name?: true
    url?: true
    place_id?: true
    handle?: true
    vendor?: true
    rating?: true
    body_html?: true
    created_at?: true
    product_type?: true
    published_at?: true
    updated_at?: true
    gender?: true
    compare_at_price?: true
    original_price?: true
    is_on_sale?: true
    sale_ratio?: true
    is_available?: true
  }

  export type ProductCountAggregateInputType = {
    sh_id?: true
    id?: true
    title?: true
    business_name?: true
    url?: true
    place_id?: true
    handle?: true
    vendor?: true
    tags?: true
    variants?: true
    images?: true
    options?: true
    rating?: true
    body_html?: true
    created_at?: true
    product_type?: true
    published_at?: true
    updated_at?: true
    colors?: true
    gender?: true
    compare_at_price?: true
    original_price?: true
    sizes?: true
    buckets?: true
    is_on_sale?: true
    sale_ratio?: true
    is_available?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    sh_id: number
    id: string
    title: string
    business_name: string | null
    url: string | null
    place_id: string | null
    handle: string | null
    vendor: string | null
    tags: string[]
    variants: JsonValue | null
    images: JsonValue | null
    options: JsonValue | null
    rating: number | null
    body_html: string | null
    created_at: Date
    product_type: string | null
    published_at: Date
    updated_at: Date
    colors: string[]
    gender: string | null
    compare_at_price: number | null
    original_price: number | null
    sizes: string[]
    buckets: string[]
    is_on_sale: boolean | null
    sale_ratio: number | null
    is_available: boolean | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    sh_id?: boolean
    id?: boolean
    title?: boolean
    business_name?: boolean
    url?: boolean
    place_id?: boolean
    handle?: boolean
    vendor?: boolean
    tags?: boolean
    variants?: boolean
    images?: boolean
    options?: boolean
    rating?: boolean
    body_html?: boolean
    created_at?: boolean
    product_type?: boolean
    published_at?: boolean
    updated_at?: boolean
    colors?: boolean
    gender?: boolean
    compare_at_price?: boolean
    original_price?: boolean
    sizes?: boolean
    buckets?: boolean
    is_on_sale?: boolean
    sale_ratio?: boolean
    is_available?: boolean
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Product ? Product[P] : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null >, Prisma__ProductClient<ProductGetPayload<T> | null >>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `sh_id`
     * const productWithSh_idOnly = await prisma.product.findMany({ select: { sh_id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Throw an Error if a Product can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    birthdate: string | null
    gender: string | null
    image: string | null
    role: string | null
    has_latest_app: string | null
    age_range: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    birthdate: string | null
    gender: string | null
    image: string | null
    role: string | null
    has_latest_app: string | null
    age_range: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    password: number
    birthdate: number
    gender: number
    image: number
    role: number
    size: number
    buckets: number
    location: number
    favourite: number
    settings: number
    has_latest_app: number
    age_range: number
    cart_ids: number
    wish_list_ids: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    birthdate?: true
    gender?: true
    image?: true
    role?: true
    has_latest_app?: true
    age_range?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    birthdate?: true
    gender?: true
    image?: true
    role?: true
    has_latest_app?: true
    age_range?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    password?: true
    birthdate?: true
    gender?: true
    image?: true
    role?: true
    size?: true
    buckets?: true
    location?: true
    favourite?: true
    settings?: true
    has_latest_app?: true
    age_range?: true
    cart_ids?: true
    wish_list_ids?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    password: string | null
    birthdate: string | null
    gender: string | null
    image: string | null
    role: string | null
    size: JsonValue | null
    buckets: string[]
    location: JsonValue | null
    favourite: JsonValue | null
    settings: JsonValue | null
    has_latest_app: string | null
    age_range: string | null
    cart_ids: string[]
    wish_list_ids: string[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    birthdate?: boolean
    gender?: boolean
    image?: boolean
    role?: boolean
    size?: boolean
    buckets?: boolean
    location?: boolean
    favourite?: boolean
    settings?: boolean
    has_latest_app?: boolean
    age_range?: boolean
    cart_ids?: boolean
    wish_list_ids?: boolean
    sessions?: boolean | SessionFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    sessions?: boolean | SessionFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model SanitizationData
   */


  export type AggregateSanitizationData = {
    _count: SanitizationDataCountAggregateOutputType | null
    _min: SanitizationDataMinAggregateOutputType | null
    _max: SanitizationDataMaxAggregateOutputType | null
  }

  export type SanitizationDataMinAggregateOutputType = {
    id: string | null
  }

  export type SanitizationDataMaxAggregateOutputType = {
    id: string | null
  }

  export type SanitizationDataCountAggregateOutputType = {
    id: number
    colors: number
    sizes: number
    product_types: number
    _all: number
  }


  export type SanitizationDataMinAggregateInputType = {
    id?: true
  }

  export type SanitizationDataMaxAggregateInputType = {
    id?: true
  }

  export type SanitizationDataCountAggregateInputType = {
    id?: true
    colors?: true
    sizes?: true
    product_types?: true
    _all?: true
  }

  export type SanitizationDataAggregateArgs = {
    /**
     * Filter which SanitizationData to aggregate.
     * 
    **/
    where?: SanitizationDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SanitizationData to fetch.
     * 
    **/
    orderBy?: Enumerable<SanitizationDataOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SanitizationDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SanitizationData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SanitizationData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SanitizationData
    **/
    _count?: true | SanitizationDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SanitizationDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SanitizationDataMaxAggregateInputType
  }

  export type GetSanitizationDataAggregateType<T extends SanitizationDataAggregateArgs> = {
        [P in keyof T & keyof AggregateSanitizationData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSanitizationData[P]>
      : GetScalarType<T[P], AggregateSanitizationData[P]>
  }




  export type SanitizationDataGroupByArgs = {
    where?: SanitizationDataWhereInput
    orderBy?: Enumerable<SanitizationDataOrderByWithAggregationInput>
    by: Array<SanitizationDataScalarFieldEnum>
    having?: SanitizationDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SanitizationDataCountAggregateInputType | true
    _min?: SanitizationDataMinAggregateInputType
    _max?: SanitizationDataMaxAggregateInputType
  }


  export type SanitizationDataGroupByOutputType = {
    id: string
    colors: string[]
    sizes: string[]
    product_types: string[]
    _count: SanitizationDataCountAggregateOutputType | null
    _min: SanitizationDataMinAggregateOutputType | null
    _max: SanitizationDataMaxAggregateOutputType | null
  }

  type GetSanitizationDataGroupByPayload<T extends SanitizationDataGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SanitizationDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SanitizationDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SanitizationDataGroupByOutputType[P]>
            : GetScalarType<T[P], SanitizationDataGroupByOutputType[P]>
        }
      >
    >


  export type SanitizationDataSelect = {
    id?: boolean
    colors?: boolean
    sizes?: boolean
    product_types?: boolean
  }

  export type SanitizationDataGetPayload<
    S extends boolean | null | undefined | SanitizationDataArgs,
    U = keyof S
      > = S extends true
        ? SanitizationData
    : S extends undefined
    ? never
    : S extends SanitizationDataArgs | SanitizationDataFindManyArgs
    ?'include' extends U
    ? SanitizationData 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SanitizationData ? SanitizationData[P] : never
  } 
    : SanitizationData
  : SanitizationData


  type SanitizationDataCountArgs = Merge<
    Omit<SanitizationDataFindManyArgs, 'select' | 'include'> & {
      select?: SanitizationDataCountAggregateInputType | true
    }
  >

  export interface SanitizationDataDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SanitizationData that matches the filter.
     * @param {SanitizationDataFindUniqueArgs} args - Arguments to find a SanitizationData
     * @example
     * // Get one SanitizationData
     * const sanitizationData = await prisma.sanitizationData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SanitizationDataFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SanitizationDataFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SanitizationData'> extends True ? CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>> : CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData | null >, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T> | null >>

    /**
     * Find the first SanitizationData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataFindFirstArgs} args - Arguments to find a SanitizationData
     * @example
     * // Get one SanitizationData
     * const sanitizationData = await prisma.sanitizationData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SanitizationDataFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SanitizationDataFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SanitizationData'> extends True ? CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>> : CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData | null >, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T> | null >>

    /**
     * Find zero or more SanitizationData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SanitizationData
     * const sanitizationData = await prisma.sanitizationData.findMany()
     * 
     * // Get first 10 SanitizationData
     * const sanitizationData = await prisma.sanitizationData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sanitizationDataWithIdOnly = await prisma.sanitizationData.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SanitizationDataFindManyArgs>(
      args?: SelectSubset<T, SanitizationDataFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SanitizationData>>, PrismaPromise<Array<SanitizationDataGetPayload<T>>>>

    /**
     * Create a SanitizationData.
     * @param {SanitizationDataCreateArgs} args - Arguments to create a SanitizationData.
     * @example
     * // Create one SanitizationData
     * const SanitizationData = await prisma.sanitizationData.create({
     *   data: {
     *     // ... data to create a SanitizationData
     *   }
     * })
     * 
    **/
    create<T extends SanitizationDataCreateArgs>(
      args: SelectSubset<T, SanitizationDataCreateArgs>
    ): CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>>

    /**
     * Create many SanitizationData.
     *     @param {SanitizationDataCreateManyArgs} args - Arguments to create many SanitizationData.
     *     @example
     *     // Create many SanitizationData
     *     const sanitizationData = await prisma.sanitizationData.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SanitizationDataCreateManyArgs>(
      args?: SelectSubset<T, SanitizationDataCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SanitizationData.
     * @param {SanitizationDataDeleteArgs} args - Arguments to delete one SanitizationData.
     * @example
     * // Delete one SanitizationData
     * const SanitizationData = await prisma.sanitizationData.delete({
     *   where: {
     *     // ... filter to delete one SanitizationData
     *   }
     * })
     * 
    **/
    delete<T extends SanitizationDataDeleteArgs>(
      args: SelectSubset<T, SanitizationDataDeleteArgs>
    ): CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>>

    /**
     * Update one SanitizationData.
     * @param {SanitizationDataUpdateArgs} args - Arguments to update one SanitizationData.
     * @example
     * // Update one SanitizationData
     * const sanitizationData = await prisma.sanitizationData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SanitizationDataUpdateArgs>(
      args: SelectSubset<T, SanitizationDataUpdateArgs>
    ): CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>>

    /**
     * Delete zero or more SanitizationData.
     * @param {SanitizationDataDeleteManyArgs} args - Arguments to filter SanitizationData to delete.
     * @example
     * // Delete a few SanitizationData
     * const { count } = await prisma.sanitizationData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SanitizationDataDeleteManyArgs>(
      args?: SelectSubset<T, SanitizationDataDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SanitizationData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SanitizationData
     * const sanitizationData = await prisma.sanitizationData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SanitizationDataUpdateManyArgs>(
      args: SelectSubset<T, SanitizationDataUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SanitizationData.
     * @param {SanitizationDataUpsertArgs} args - Arguments to update or create a SanitizationData.
     * @example
     * // Update or create a SanitizationData
     * const sanitizationData = await prisma.sanitizationData.upsert({
     *   create: {
     *     // ... data to create a SanitizationData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SanitizationData we want to update
     *   }
     * })
    **/
    upsert<T extends SanitizationDataUpsertArgs>(
      args: SelectSubset<T, SanitizationDataUpsertArgs>
    ): CheckSelect<T, Prisma__SanitizationDataClient<SanitizationData>, Prisma__SanitizationDataClient<SanitizationDataGetPayload<T>>>

    /**
     * Count the number of SanitizationData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataCountArgs} args - Arguments to filter SanitizationData to count.
     * @example
     * // Count the number of SanitizationData
     * const count = await prisma.sanitizationData.count({
     *   where: {
     *     // ... the filter for the SanitizationData we want to count
     *   }
     * })
    **/
    count<T extends SanitizationDataCountArgs>(
      args?: Subset<T, SanitizationDataCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SanitizationDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SanitizationData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SanitizationDataAggregateArgs>(args: Subset<T, SanitizationDataAggregateArgs>): PrismaPromise<GetSanitizationDataAggregateType<T>>

    /**
     * Group by SanitizationData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SanitizationDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SanitizationDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SanitizationDataGroupByArgs['orderBy'] }
        : { orderBy?: SanitizationDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SanitizationDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSanitizationDataGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SanitizationData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SanitizationDataClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SanitizationData findUnique
   */
  export type SanitizationDataFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * Throw an Error if a SanitizationData can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SanitizationData to fetch.
     * 
    **/
    where: SanitizationDataWhereUniqueInput
  }


  /**
   * SanitizationData findFirst
   */
  export type SanitizationDataFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * Throw an Error if a SanitizationData can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SanitizationData to fetch.
     * 
    **/
    where?: SanitizationDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SanitizationData to fetch.
     * 
    **/
    orderBy?: Enumerable<SanitizationDataOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SanitizationData.
     * 
    **/
    cursor?: SanitizationDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SanitizationData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SanitizationData.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SanitizationData.
     * 
    **/
    distinct?: Enumerable<SanitizationDataScalarFieldEnum>
  }


  /**
   * SanitizationData findMany
   */
  export type SanitizationDataFindManyArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * Filter, which SanitizationData to fetch.
     * 
    **/
    where?: SanitizationDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SanitizationData to fetch.
     * 
    **/
    orderBy?: Enumerable<SanitizationDataOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SanitizationData.
     * 
    **/
    cursor?: SanitizationDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SanitizationData from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SanitizationData.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SanitizationDataScalarFieldEnum>
  }


  /**
   * SanitizationData create
   */
  export type SanitizationDataCreateArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * The data needed to create a SanitizationData.
     * 
    **/
    data: XOR<SanitizationDataCreateInput, SanitizationDataUncheckedCreateInput>
  }


  /**
   * SanitizationData createMany
   */
  export type SanitizationDataCreateManyArgs = {
    /**
     * The data used to create many SanitizationData.
     * 
    **/
    data: Enumerable<SanitizationDataCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SanitizationData update
   */
  export type SanitizationDataUpdateArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * The data needed to update a SanitizationData.
     * 
    **/
    data: XOR<SanitizationDataUpdateInput, SanitizationDataUncheckedUpdateInput>
    /**
     * Choose, which SanitizationData to update.
     * 
    **/
    where: SanitizationDataWhereUniqueInput
  }


  /**
   * SanitizationData updateMany
   */
  export type SanitizationDataUpdateManyArgs = {
    /**
     * The data used to update SanitizationData.
     * 
    **/
    data: XOR<SanitizationDataUpdateManyMutationInput, SanitizationDataUncheckedUpdateManyInput>
    /**
     * Filter which SanitizationData to update
     * 
    **/
    where?: SanitizationDataWhereInput
  }


  /**
   * SanitizationData upsert
   */
  export type SanitizationDataUpsertArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * The filter to search for the SanitizationData to update in case it exists.
     * 
    **/
    where: SanitizationDataWhereUniqueInput
    /**
     * In case the SanitizationData found by the `where` argument doesn't exist, create a new SanitizationData with this data.
     * 
    **/
    create: XOR<SanitizationDataCreateInput, SanitizationDataUncheckedCreateInput>
    /**
     * In case the SanitizationData was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SanitizationDataUpdateInput, SanitizationDataUncheckedUpdateInput>
  }


  /**
   * SanitizationData delete
   */
  export type SanitizationDataDeleteArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
    /**
     * Filter which SanitizationData to delete.
     * 
    **/
    where: SanitizationDataWhereUniqueInput
  }


  /**
   * SanitizationData deleteMany
   */
  export type SanitizationDataDeleteManyArgs = {
    /**
     * Filter which SanitizationData to delete
     * 
    **/
    where?: SanitizationDataWhereInput
  }


  /**
   * SanitizationData without action
   */
  export type SanitizationDataArgs = {
    /**
     * Select specific fields to fetch from the SanitizationData
     * 
    **/
    select?: SanitizationDataSelect | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserArgs
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model VerificationToken
   */


  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs = {
    /**
     * Filter which VerificationToken to aggregate.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs = {
    where?: VerificationTokenWhereInput
    orderBy?: Enumerable<VerificationTokenOrderByWithAggregationInput>
    by: Array<VerificationTokenScalarFieldEnum>
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }


  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenGetPayload<
    S extends boolean | null | undefined | VerificationTokenArgs,
    U = keyof S
      > = S extends true
        ? VerificationToken
    : S extends undefined
    ? never
    : S extends VerificationTokenArgs | VerificationTokenFindManyArgs
    ?'include' extends U
    ? VerificationToken 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof VerificationToken ? VerificationToken[P] : never
  } 
    : VerificationToken
  : VerificationToken


  type VerificationTokenCountArgs = Merge<
    Omit<VerificationTokenFindManyArgs, 'select' | 'include'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }
  >

  export interface VerificationTokenDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VerificationToken'> extends True ? CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>> : CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken | null >, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T> | null >>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<VerificationToken>>, PrismaPromise<Array<VerificationTokenGetPayload<T>>>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs>(
      args: SelectSubset<T, VerificationTokenCreateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs>(
      args: SelectSubset<T, VerificationTokenDeleteArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs>(
      args: SelectSubset<T, VerificationTokenUpdateArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs>(
      args: SelectSubset<T, VerificationTokenUpsertArgs>
    ): CheckSelect<T, Prisma__VerificationTokenClient<VerificationToken>, Prisma__VerificationTokenClient<VerificationTokenGetPayload<T>>>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationTokenClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Throw an Error if a VerificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Throw an Error if a VerificationToken can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which VerificationToken to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     * 
    **/
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter, which VerificationTokens to fetch.
     * 
    **/
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     * 
    **/
    orderBy?: Enumerable<VerificationTokenOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     * 
    **/
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VerificationTokenScalarFieldEnum>
  }


  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to create a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }


  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs = {
    /**
     * The data used to create many VerificationTokens.
     * 
    **/
    data: Enumerable<VerificationTokenCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The data needed to update a VerificationToken.
     * 
    **/
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs = {
    /**
     * The data used to update VerificationTokens.
     * 
    **/
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     * 
    **/
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }


  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
    /**
     * Filter which VerificationToken to delete.
     * 
    **/
    where: VerificationTokenWhereUniqueInput
  }


  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs = {
    /**
     * Filter which VerificationTokens to delete
     * 
    **/
    where?: VerificationTokenWhereInput
  }


  /**
   * VerificationToken without action
   */
  export type VerificationTokenArgs = {
    /**
     * Select specific fields to fetch from the VerificationToken
     * 
    **/
    select?: VerificationTokenSelect | null
  }



  /**
   * Model ShopifySession
   */


  export type AggregateShopifySession = {
    _count: ShopifySessionCountAggregateOutputType | null
    _min: ShopifySessionMinAggregateOutputType | null
    _max: ShopifySessionMaxAggregateOutputType | null
  }

  export type ShopifySessionMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sessionData: string | null
  }

  export type ShopifySessionMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    sessionData: string | null
  }

  export type ShopifySessionCountAggregateOutputType = {
    id: number
    sessionId: number
    sessionData: number
    _all: number
  }


  export type ShopifySessionMinAggregateInputType = {
    id?: true
    sessionId?: true
    sessionData?: true
  }

  export type ShopifySessionMaxAggregateInputType = {
    id?: true
    sessionId?: true
    sessionData?: true
  }

  export type ShopifySessionCountAggregateInputType = {
    id?: true
    sessionId?: true
    sessionData?: true
    _all?: true
  }

  export type ShopifySessionAggregateArgs = {
    /**
     * Filter which ShopifySession to aggregate.
     * 
    **/
    where?: ShopifySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifySessions to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifySessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopifySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifySessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifySessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopifySessions
    **/
    _count?: true | ShopifySessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopifySessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopifySessionMaxAggregateInputType
  }

  export type GetShopifySessionAggregateType<T extends ShopifySessionAggregateArgs> = {
        [P in keyof T & keyof AggregateShopifySession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopifySession[P]>
      : GetScalarType<T[P], AggregateShopifySession[P]>
  }




  export type ShopifySessionGroupByArgs = {
    where?: ShopifySessionWhereInput
    orderBy?: Enumerable<ShopifySessionOrderByWithAggregationInput>
    by: Array<ShopifySessionScalarFieldEnum>
    having?: ShopifySessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopifySessionCountAggregateInputType | true
    _min?: ShopifySessionMinAggregateInputType
    _max?: ShopifySessionMaxAggregateInputType
  }


  export type ShopifySessionGroupByOutputType = {
    id: string
    sessionId: string
    sessionData: string
    _count: ShopifySessionCountAggregateOutputType | null
    _min: ShopifySessionMinAggregateOutputType | null
    _max: ShopifySessionMaxAggregateOutputType | null
  }

  type GetShopifySessionGroupByPayload<T extends ShopifySessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopifySessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopifySessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopifySessionGroupByOutputType[P]>
            : GetScalarType<T[P], ShopifySessionGroupByOutputType[P]>
        }
      >
    >


  export type ShopifySessionSelect = {
    id?: boolean
    sessionId?: boolean
    sessionData?: boolean
  }

  export type ShopifySessionGetPayload<
    S extends boolean | null | undefined | ShopifySessionArgs,
    U = keyof S
      > = S extends true
        ? ShopifySession
    : S extends undefined
    ? never
    : S extends ShopifySessionArgs | ShopifySessionFindManyArgs
    ?'include' extends U
    ? ShopifySession 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ShopifySession ? ShopifySession[P] : never
  } 
    : ShopifySession
  : ShopifySession


  type ShopifySessionCountArgs = Merge<
    Omit<ShopifySessionFindManyArgs, 'select' | 'include'> & {
      select?: ShopifySessionCountAggregateInputType | true
    }
  >

  export interface ShopifySessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShopifySession that matches the filter.
     * @param {ShopifySessionFindUniqueArgs} args - Arguments to find a ShopifySession
     * @example
     * // Get one ShopifySession
     * const shopifySession = await prisma.shopifySession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopifySessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopifySessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShopifySession'> extends True ? CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>> : CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession | null >, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T> | null >>

    /**
     * Find the first ShopifySession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionFindFirstArgs} args - Arguments to find a ShopifySession
     * @example
     * // Get one ShopifySession
     * const shopifySession = await prisma.shopifySession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopifySessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopifySessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShopifySession'> extends True ? CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>> : CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession | null >, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T> | null >>

    /**
     * Find zero or more ShopifySessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopifySessions
     * const shopifySessions = await prisma.shopifySession.findMany()
     * 
     * // Get first 10 ShopifySessions
     * const shopifySessions = await prisma.shopifySession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopifySessionWithIdOnly = await prisma.shopifySession.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopifySessionFindManyArgs>(
      args?: SelectSubset<T, ShopifySessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShopifySession>>, PrismaPromise<Array<ShopifySessionGetPayload<T>>>>

    /**
     * Create a ShopifySession.
     * @param {ShopifySessionCreateArgs} args - Arguments to create a ShopifySession.
     * @example
     * // Create one ShopifySession
     * const ShopifySession = await prisma.shopifySession.create({
     *   data: {
     *     // ... data to create a ShopifySession
     *   }
     * })
     * 
    **/
    create<T extends ShopifySessionCreateArgs>(
      args: SelectSubset<T, ShopifySessionCreateArgs>
    ): CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>>

    /**
     * Create many ShopifySessions.
     *     @param {ShopifySessionCreateManyArgs} args - Arguments to create many ShopifySessions.
     *     @example
     *     // Create many ShopifySessions
     *     const shopifySession = await prisma.shopifySession.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopifySessionCreateManyArgs>(
      args?: SelectSubset<T, ShopifySessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShopifySession.
     * @param {ShopifySessionDeleteArgs} args - Arguments to delete one ShopifySession.
     * @example
     * // Delete one ShopifySession
     * const ShopifySession = await prisma.shopifySession.delete({
     *   where: {
     *     // ... filter to delete one ShopifySession
     *   }
     * })
     * 
    **/
    delete<T extends ShopifySessionDeleteArgs>(
      args: SelectSubset<T, ShopifySessionDeleteArgs>
    ): CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>>

    /**
     * Update one ShopifySession.
     * @param {ShopifySessionUpdateArgs} args - Arguments to update one ShopifySession.
     * @example
     * // Update one ShopifySession
     * const shopifySession = await prisma.shopifySession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopifySessionUpdateArgs>(
      args: SelectSubset<T, ShopifySessionUpdateArgs>
    ): CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>>

    /**
     * Delete zero or more ShopifySessions.
     * @param {ShopifySessionDeleteManyArgs} args - Arguments to filter ShopifySessions to delete.
     * @example
     * // Delete a few ShopifySessions
     * const { count } = await prisma.shopifySession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopifySessionDeleteManyArgs>(
      args?: SelectSubset<T, ShopifySessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopifySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopifySessions
     * const shopifySession = await prisma.shopifySession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopifySessionUpdateManyArgs>(
      args: SelectSubset<T, ShopifySessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShopifySession.
     * @param {ShopifySessionUpsertArgs} args - Arguments to update or create a ShopifySession.
     * @example
     * // Update or create a ShopifySession
     * const shopifySession = await prisma.shopifySession.upsert({
     *   create: {
     *     // ... data to create a ShopifySession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopifySession we want to update
     *   }
     * })
    **/
    upsert<T extends ShopifySessionUpsertArgs>(
      args: SelectSubset<T, ShopifySessionUpsertArgs>
    ): CheckSelect<T, Prisma__ShopifySessionClient<ShopifySession>, Prisma__ShopifySessionClient<ShopifySessionGetPayload<T>>>

    /**
     * Count the number of ShopifySessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionCountArgs} args - Arguments to filter ShopifySessions to count.
     * @example
     * // Count the number of ShopifySessions
     * const count = await prisma.shopifySession.count({
     *   where: {
     *     // ... the filter for the ShopifySessions we want to count
     *   }
     * })
    **/
    count<T extends ShopifySessionCountArgs>(
      args?: Subset<T, ShopifySessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopifySessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopifySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopifySessionAggregateArgs>(args: Subset<T, ShopifySessionAggregateArgs>): PrismaPromise<GetShopifySessionAggregateType<T>>

    /**
     * Group by ShopifySession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifySessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopifySessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopifySessionGroupByArgs['orderBy'] }
        : { orderBy?: ShopifySessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopifySessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopifySessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopifySession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopifySessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShopifySession findUnique
   */
  export type ShopifySessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * Throw an Error if a ShopifySession can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopifySession to fetch.
     * 
    **/
    where: ShopifySessionWhereUniqueInput
  }


  /**
   * ShopifySession findFirst
   */
  export type ShopifySessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * Throw an Error if a ShopifySession can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopifySession to fetch.
     * 
    **/
    where?: ShopifySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifySessions to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifySessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopifySessions.
     * 
    **/
    cursor?: ShopifySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifySessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifySessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopifySessions.
     * 
    **/
    distinct?: Enumerable<ShopifySessionScalarFieldEnum>
  }


  /**
   * ShopifySession findMany
   */
  export type ShopifySessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * Filter, which ShopifySessions to fetch.
     * 
    **/
    where?: ShopifySessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifySessions to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifySessionOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopifySessions.
     * 
    **/
    cursor?: ShopifySessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifySessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifySessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopifySessionScalarFieldEnum>
  }


  /**
   * ShopifySession create
   */
  export type ShopifySessionCreateArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * The data needed to create a ShopifySession.
     * 
    **/
    data: XOR<ShopifySessionCreateInput, ShopifySessionUncheckedCreateInput>
  }


  /**
   * ShopifySession createMany
   */
  export type ShopifySessionCreateManyArgs = {
    /**
     * The data used to create many ShopifySessions.
     * 
    **/
    data: Enumerable<ShopifySessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShopifySession update
   */
  export type ShopifySessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * The data needed to update a ShopifySession.
     * 
    **/
    data: XOR<ShopifySessionUpdateInput, ShopifySessionUncheckedUpdateInput>
    /**
     * Choose, which ShopifySession to update.
     * 
    **/
    where: ShopifySessionWhereUniqueInput
  }


  /**
   * ShopifySession updateMany
   */
  export type ShopifySessionUpdateManyArgs = {
    /**
     * The data used to update ShopifySessions.
     * 
    **/
    data: XOR<ShopifySessionUpdateManyMutationInput, ShopifySessionUncheckedUpdateManyInput>
    /**
     * Filter which ShopifySessions to update
     * 
    **/
    where?: ShopifySessionWhereInput
  }


  /**
   * ShopifySession upsert
   */
  export type ShopifySessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * The filter to search for the ShopifySession to update in case it exists.
     * 
    **/
    where: ShopifySessionWhereUniqueInput
    /**
     * In case the ShopifySession found by the `where` argument doesn't exist, create a new ShopifySession with this data.
     * 
    **/
    create: XOR<ShopifySessionCreateInput, ShopifySessionUncheckedCreateInput>
    /**
     * In case the ShopifySession was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopifySessionUpdateInput, ShopifySessionUncheckedUpdateInput>
  }


  /**
   * ShopifySession delete
   */
  export type ShopifySessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
    /**
     * Filter which ShopifySession to delete.
     * 
    **/
    where: ShopifySessionWhereUniqueInput
  }


  /**
   * ShopifySession deleteMany
   */
  export type ShopifySessionDeleteManyArgs = {
    /**
     * Filter which ShopifySessions to delete
     * 
    **/
    where?: ShopifySessionWhereInput
  }


  /**
   * ShopifySession without action
   */
  export type ShopifySessionArgs = {
    /**
     * Select specific fields to fetch from the ShopifySession
     * 
    **/
    select?: ShopifySessionSelect | null
  }



  /**
   * Model ShopifyShop
   */


  export type AggregateShopifyShop = {
    _count: ShopifyShopCountAggregateOutputType | null
    _min: ShopifyShopMinAggregateOutputType | null
    _max: ShopifyShopMaxAggregateOutputType | null
  }

  export type ShopifyShopMinAggregateOutputType = {
    id: string | null
    shopifyShopId: string | null
    domain: string | null
    name: string | null
    country: string | null
    city: string | null
    storeAccessToken: string | null
    accessToken: string | null
    onboardingCompleted: boolean | null
    onboardingInfoCompleted: boolean | null
    termsAccepted: boolean | null
  }

  export type ShopifyShopMaxAggregateOutputType = {
    id: string | null
    shopifyShopId: string | null
    domain: string | null
    name: string | null
    country: string | null
    city: string | null
    storeAccessToken: string | null
    accessToken: string | null
    onboardingCompleted: boolean | null
    onboardingInfoCompleted: boolean | null
    termsAccepted: boolean | null
  }

  export type ShopifyShopCountAggregateOutputType = {
    id: number
    shopifyShopId: number
    domain: number
    name: number
    country: number
    city: number
    storeAccessToken: number
    accessToken: number
    onboardingCompleted: number
    onboardingInfoCompleted: number
    termsAccepted: number
    _all: number
  }


  export type ShopifyShopMinAggregateInputType = {
    id?: true
    shopifyShopId?: true
    domain?: true
    name?: true
    country?: true
    city?: true
    storeAccessToken?: true
    accessToken?: true
    onboardingCompleted?: true
    onboardingInfoCompleted?: true
    termsAccepted?: true
  }

  export type ShopifyShopMaxAggregateInputType = {
    id?: true
    shopifyShopId?: true
    domain?: true
    name?: true
    country?: true
    city?: true
    storeAccessToken?: true
    accessToken?: true
    onboardingCompleted?: true
    onboardingInfoCompleted?: true
    termsAccepted?: true
  }

  export type ShopifyShopCountAggregateInputType = {
    id?: true
    shopifyShopId?: true
    domain?: true
    name?: true
    country?: true
    city?: true
    storeAccessToken?: true
    accessToken?: true
    onboardingCompleted?: true
    onboardingInfoCompleted?: true
    termsAccepted?: true
    _all?: true
  }

  export type ShopifyShopAggregateArgs = {
    /**
     * Filter which ShopifyShop to aggregate.
     * 
    **/
    where?: ShopifyShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifyShops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifyShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShopifyShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifyShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifyShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShopifyShops
    **/
    _count?: true | ShopifyShopCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShopifyShopMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShopifyShopMaxAggregateInputType
  }

  export type GetShopifyShopAggregateType<T extends ShopifyShopAggregateArgs> = {
        [P in keyof T & keyof AggregateShopifyShop]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShopifyShop[P]>
      : GetScalarType<T[P], AggregateShopifyShop[P]>
  }




  export type ShopifyShopGroupByArgs = {
    where?: ShopifyShopWhereInput
    orderBy?: Enumerable<ShopifyShopOrderByWithAggregationInput>
    by: Array<ShopifyShopScalarFieldEnum>
    having?: ShopifyShopScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShopifyShopCountAggregateInputType | true
    _min?: ShopifyShopMinAggregateInputType
    _max?: ShopifyShopMaxAggregateInputType
  }


  export type ShopifyShopGroupByOutputType = {
    id: string
    shopifyShopId: string
    domain: string
    name: string
    country: string
    city: string
    storeAccessToken: string
    accessToken: string
    onboardingCompleted: boolean
    onboardingInfoCompleted: boolean
    termsAccepted: boolean
    _count: ShopifyShopCountAggregateOutputType | null
    _min: ShopifyShopMinAggregateOutputType | null
    _max: ShopifyShopMaxAggregateOutputType | null
  }

  type GetShopifyShopGroupByPayload<T extends ShopifyShopGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShopifyShopGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShopifyShopGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShopifyShopGroupByOutputType[P]>
            : GetScalarType<T[P], ShopifyShopGroupByOutputType[P]>
        }
      >
    >


  export type ShopifyShopSelect = {
    id?: boolean
    shopifyShopId?: boolean
    domain?: boolean
    name?: boolean
    country?: boolean
    city?: boolean
    storeAccessToken?: boolean
    accessToken?: boolean
    onboardingCompleted?: boolean
    onboardingInfoCompleted?: boolean
    termsAccepted?: boolean
  }

  export type ShopifyShopGetPayload<
    S extends boolean | null | undefined | ShopifyShopArgs,
    U = keyof S
      > = S extends true
        ? ShopifyShop
    : S extends undefined
    ? never
    : S extends ShopifyShopArgs | ShopifyShopFindManyArgs
    ?'include' extends U
    ? ShopifyShop 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ShopifyShop ? ShopifyShop[P] : never
  } 
    : ShopifyShop
  : ShopifyShop


  type ShopifyShopCountArgs = Merge<
    Omit<ShopifyShopFindManyArgs, 'select' | 'include'> & {
      select?: ShopifyShopCountAggregateInputType | true
    }
  >

  export interface ShopifyShopDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ShopifyShop that matches the filter.
     * @param {ShopifyShopFindUniqueArgs} args - Arguments to find a ShopifyShop
     * @example
     * // Get one ShopifyShop
     * const shopifyShop = await prisma.shopifyShop.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShopifyShopFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShopifyShopFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShopifyShop'> extends True ? CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop | null >, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T> | null >>

    /**
     * Find the first ShopifyShop that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopFindFirstArgs} args - Arguments to find a ShopifyShop
     * @example
     * // Get one ShopifyShop
     * const shopifyShop = await prisma.shopifyShop.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShopifyShopFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShopifyShopFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShopifyShop'> extends True ? CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>> : CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop | null >, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T> | null >>

    /**
     * Find zero or more ShopifyShops that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShopifyShops
     * const shopifyShops = await prisma.shopifyShop.findMany()
     * 
     * // Get first 10 ShopifyShops
     * const shopifyShops = await prisma.shopifyShop.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shopifyShopWithIdOnly = await prisma.shopifyShop.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShopifyShopFindManyArgs>(
      args?: SelectSubset<T, ShopifyShopFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ShopifyShop>>, PrismaPromise<Array<ShopifyShopGetPayload<T>>>>

    /**
     * Create a ShopifyShop.
     * @param {ShopifyShopCreateArgs} args - Arguments to create a ShopifyShop.
     * @example
     * // Create one ShopifyShop
     * const ShopifyShop = await prisma.shopifyShop.create({
     *   data: {
     *     // ... data to create a ShopifyShop
     *   }
     * })
     * 
    **/
    create<T extends ShopifyShopCreateArgs>(
      args: SelectSubset<T, ShopifyShopCreateArgs>
    ): CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>>

    /**
     * Create many ShopifyShops.
     *     @param {ShopifyShopCreateManyArgs} args - Arguments to create many ShopifyShops.
     *     @example
     *     // Create many ShopifyShops
     *     const shopifyShop = await prisma.shopifyShop.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShopifyShopCreateManyArgs>(
      args?: SelectSubset<T, ShopifyShopCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ShopifyShop.
     * @param {ShopifyShopDeleteArgs} args - Arguments to delete one ShopifyShop.
     * @example
     * // Delete one ShopifyShop
     * const ShopifyShop = await prisma.shopifyShop.delete({
     *   where: {
     *     // ... filter to delete one ShopifyShop
     *   }
     * })
     * 
    **/
    delete<T extends ShopifyShopDeleteArgs>(
      args: SelectSubset<T, ShopifyShopDeleteArgs>
    ): CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>>

    /**
     * Update one ShopifyShop.
     * @param {ShopifyShopUpdateArgs} args - Arguments to update one ShopifyShop.
     * @example
     * // Update one ShopifyShop
     * const shopifyShop = await prisma.shopifyShop.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShopifyShopUpdateArgs>(
      args: SelectSubset<T, ShopifyShopUpdateArgs>
    ): CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>>

    /**
     * Delete zero or more ShopifyShops.
     * @param {ShopifyShopDeleteManyArgs} args - Arguments to filter ShopifyShops to delete.
     * @example
     * // Delete a few ShopifyShops
     * const { count } = await prisma.shopifyShop.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShopifyShopDeleteManyArgs>(
      args?: SelectSubset<T, ShopifyShopDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShopifyShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShopifyShops
     * const shopifyShop = await prisma.shopifyShop.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShopifyShopUpdateManyArgs>(
      args: SelectSubset<T, ShopifyShopUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ShopifyShop.
     * @param {ShopifyShopUpsertArgs} args - Arguments to update or create a ShopifyShop.
     * @example
     * // Update or create a ShopifyShop
     * const shopifyShop = await prisma.shopifyShop.upsert({
     *   create: {
     *     // ... data to create a ShopifyShop
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShopifyShop we want to update
     *   }
     * })
    **/
    upsert<T extends ShopifyShopUpsertArgs>(
      args: SelectSubset<T, ShopifyShopUpsertArgs>
    ): CheckSelect<T, Prisma__ShopifyShopClient<ShopifyShop>, Prisma__ShopifyShopClient<ShopifyShopGetPayload<T>>>

    /**
     * Count the number of ShopifyShops.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopCountArgs} args - Arguments to filter ShopifyShops to count.
     * @example
     * // Count the number of ShopifyShops
     * const count = await prisma.shopifyShop.count({
     *   where: {
     *     // ... the filter for the ShopifyShops we want to count
     *   }
     * })
    **/
    count<T extends ShopifyShopCountArgs>(
      args?: Subset<T, ShopifyShopCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShopifyShopCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShopifyShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShopifyShopAggregateArgs>(args: Subset<T, ShopifyShopAggregateArgs>): PrismaPromise<GetShopifyShopAggregateType<T>>

    /**
     * Group by ShopifyShop.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShopifyShopGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShopifyShopGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShopifyShopGroupByArgs['orderBy'] }
        : { orderBy?: ShopifyShopGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShopifyShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopifyShopGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShopifyShop.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShopifyShopClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ShopifyShop findUnique
   */
  export type ShopifyShopFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * Throw an Error if a ShopifyShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopifyShop to fetch.
     * 
    **/
    where: ShopifyShopWhereUniqueInput
  }


  /**
   * ShopifyShop findFirst
   */
  export type ShopifyShopFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * Throw an Error if a ShopifyShop can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ShopifyShop to fetch.
     * 
    **/
    where?: ShopifyShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifyShops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifyShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShopifyShops.
     * 
    **/
    cursor?: ShopifyShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifyShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifyShops.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShopifyShops.
     * 
    **/
    distinct?: Enumerable<ShopifyShopScalarFieldEnum>
  }


  /**
   * ShopifyShop findMany
   */
  export type ShopifyShopFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * Filter, which ShopifyShops to fetch.
     * 
    **/
    where?: ShopifyShopWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShopifyShops to fetch.
     * 
    **/
    orderBy?: Enumerable<ShopifyShopOrderByWithRelationAndSearchRelevanceInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShopifyShops.
     * 
    **/
    cursor?: ShopifyShopWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShopifyShops from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShopifyShops.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShopifyShopScalarFieldEnum>
  }


  /**
   * ShopifyShop create
   */
  export type ShopifyShopCreateArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * The data needed to create a ShopifyShop.
     * 
    **/
    data: XOR<ShopifyShopCreateInput, ShopifyShopUncheckedCreateInput>
  }


  /**
   * ShopifyShop createMany
   */
  export type ShopifyShopCreateManyArgs = {
    /**
     * The data used to create many ShopifyShops.
     * 
    **/
    data: Enumerable<ShopifyShopCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShopifyShop update
   */
  export type ShopifyShopUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * The data needed to update a ShopifyShop.
     * 
    **/
    data: XOR<ShopifyShopUpdateInput, ShopifyShopUncheckedUpdateInput>
    /**
     * Choose, which ShopifyShop to update.
     * 
    **/
    where: ShopifyShopWhereUniqueInput
  }


  /**
   * ShopifyShop updateMany
   */
  export type ShopifyShopUpdateManyArgs = {
    /**
     * The data used to update ShopifyShops.
     * 
    **/
    data: XOR<ShopifyShopUpdateManyMutationInput, ShopifyShopUncheckedUpdateManyInput>
    /**
     * Filter which ShopifyShops to update
     * 
    **/
    where?: ShopifyShopWhereInput
  }


  /**
   * ShopifyShop upsert
   */
  export type ShopifyShopUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * The filter to search for the ShopifyShop to update in case it exists.
     * 
    **/
    where: ShopifyShopWhereUniqueInput
    /**
     * In case the ShopifyShop found by the `where` argument doesn't exist, create a new ShopifyShop with this data.
     * 
    **/
    create: XOR<ShopifyShopCreateInput, ShopifyShopUncheckedCreateInput>
    /**
     * In case the ShopifyShop was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShopifyShopUpdateInput, ShopifyShopUncheckedUpdateInput>
  }


  /**
   * ShopifyShop delete
   */
  export type ShopifyShopDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
    /**
     * Filter which ShopifyShop to delete.
     * 
    **/
    where: ShopifyShopWhereUniqueInput
  }


  /**
   * ShopifyShop deleteMany
   */
  export type ShopifyShopDeleteManyArgs = {
    /**
     * Filter which ShopifyShops to delete
     * 
    **/
    where?: ShopifyShopWhereInput
  }


  /**
   * ShopifyShop without action
   */
  export type ShopifyShopArgs = {
    /**
     * Select specific fields to fetch from the ShopifyShop
     * 
    **/
    select?: ShopifyShopSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const TemplateClassScalarFieldEnum: {
    id: 'id',
    class_name: 'class_name',
    items: 'items',
    isSet: 'isSet',
    submitted: 'submitted',
    updated_at: 'updated_at',
    created_at: 'created_at'
  };

  export type TemplateClassScalarFieldEnum = (typeof TemplateClassScalarFieldEnum)[keyof typeof TemplateClassScalarFieldEnum]


  export const StatusScalarFieldEnum: {
    id: 'id',
    updated_at: 'updated_at',
    products: 'products',
    business_name: 'business_name'
  };

  export type StatusScalarFieldEnum = (typeof StatusScalarFieldEnum)[keyof typeof StatusScalarFieldEnum]


  export const ShopScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    domain: 'domain',
    business_name: 'business_name',
    buckets: 'buckets',
    site_host: 'site_host',
    vertical: 'vertical',
    name: 'name',
    site: 'site',
    type: 'type',
    phone: 'phone',
    borough: 'borough',
    street: 'street',
    city: 'city',
    postal_code: 'postal_code',
    province: 'province',
    country: 'country',
    latitude: 'latitude',
    longitude: 'longitude',
    rating: 'rating',
    reviews: 'reviews',
    photo: 'photo',
    street_view: 'street_view',
    working_hours: 'working_hours',
    place_id: 'place_id',
    banner_image: 'banner_image',
    logo: 'logo',
    email: 'email',
    consumer_key: 'consumer_key',
    consumer_secret: 'consumer_secret',
    is_integrated: 'is_integrated',
    is_partner: 'is_partner',
    return_policy: 'return_policy'
  };

  export type ShopScalarFieldEnum = (typeof ShopScalarFieldEnum)[keyof typeof ShopScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    sh_id: 'sh_id',
    id: 'id',
    title: 'title',
    business_name: 'business_name',
    url: 'url',
    place_id: 'place_id',
    handle: 'handle',
    vendor: 'vendor',
    tags: 'tags',
    variants: 'variants',
    images: 'images',
    options: 'options',
    rating: 'rating',
    body_html: 'body_html',
    created_at: 'created_at',
    product_type: 'product_type',
    published_at: 'published_at',
    updated_at: 'updated_at',
    colors: 'colors',
    gender: 'gender',
    compare_at_price: 'compare_at_price',
    original_price: 'original_price',
    sizes: 'sizes',
    buckets: 'buckets',
    is_on_sale: 'is_on_sale',
    sale_ratio: 'sale_ratio',
    is_available: 'is_available'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    birthdate: 'birthdate',
    gender: 'gender',
    image: 'image',
    role: 'role',
    size: 'size',
    buckets: 'buckets',
    location: 'location',
    favourite: 'favourite',
    settings: 'settings',
    has_latest_app: 'has_latest_app',
    age_range: 'age_range',
    cart_ids: 'cart_ids',
    wish_list_ids: 'wish_list_ids'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SanitizationDataScalarFieldEnum: {
    id: 'id',
    colors: 'colors',
    sizes: 'sizes',
    product_types: 'product_types'
  };

  export type SanitizationDataScalarFieldEnum = (typeof SanitizationDataScalarFieldEnum)[keyof typeof SanitizationDataScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const ShopifySessionScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    sessionData: 'sessionData'
  };

  export type ShopifySessionScalarFieldEnum = (typeof ShopifySessionScalarFieldEnum)[keyof typeof ShopifySessionScalarFieldEnum]


  export const ShopifyShopScalarFieldEnum: {
    id: 'id',
    shopifyShopId: 'shopifyShopId',
    domain: 'domain',
    name: 'name',
    country: 'country',
    city: 'city',
    storeAccessToken: 'storeAccessToken',
    accessToken: 'accessToken',
    onboardingCompleted: 'onboardingCompleted',
    onboardingInfoCompleted: 'onboardingInfoCompleted',
    termsAccepted: 'termsAccepted'
  };

  export type ShopifyShopScalarFieldEnum = (typeof ShopifyShopScalarFieldEnum)[keyof typeof ShopifyShopScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const TemplateClassOrderByRelevanceFieldEnum: {
    class_name: 'class_name',
    items: 'items'
  };

  export type TemplateClassOrderByRelevanceFieldEnum = (typeof TemplateClassOrderByRelevanceFieldEnum)[keyof typeof TemplateClassOrderByRelevanceFieldEnum]


  export const StatusOrderByRelevanceFieldEnum: {
    business_name: 'business_name'
  };

  export type StatusOrderByRelevanceFieldEnum = (typeof StatusOrderByRelevanceFieldEnum)[keyof typeof StatusOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const ShopOrderByRelevanceFieldEnum: {
    domain: 'domain',
    business_name: 'business_name',
    buckets: 'buckets',
    site_host: 'site_host',
    vertical: 'vertical',
    name: 'name',
    site: 'site',
    type: 'type',
    phone: 'phone',
    borough: 'borough',
    street: 'street',
    city: 'city',
    postal_code: 'postal_code',
    province: 'province',
    country: 'country',
    latitude: 'latitude',
    longitude: 'longitude',
    rating: 'rating',
    reviews: 'reviews',
    photo: 'photo',
    street_view: 'street_view',
    place_id: 'place_id',
    banner_image: 'banner_image',
    logo: 'logo',
    email: 'email',
    consumer_key: 'consumer_key',
    consumer_secret: 'consumer_secret',
    is_integrated: 'is_integrated',
    return_policy: 'return_policy'
  };

  export type ShopOrderByRelevanceFieldEnum = (typeof ShopOrderByRelevanceFieldEnum)[keyof typeof ShopOrderByRelevanceFieldEnum]


  export const ProductOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    business_name: 'business_name',
    url: 'url',
    place_id: 'place_id',
    handle: 'handle',
    vendor: 'vendor',
    tags: 'tags',
    body_html: 'body_html',
    product_type: 'product_type',
    colors: 'colors',
    gender: 'gender',
    sizes: 'sizes',
    buckets: 'buckets'
  };

  export type ProductOrderByRelevanceFieldEnum = (typeof ProductOrderByRelevanceFieldEnum)[keyof typeof ProductOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    birthdate: 'birthdate',
    gender: 'gender',
    image: 'image',
    role: 'role',
    buckets: 'buckets',
    has_latest_app: 'has_latest_app',
    age_range: 'age_range',
    cart_ids: 'cart_ids',
    wish_list_ids: 'wish_list_ids'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SanitizationDataOrderByRelevanceFieldEnum: {
    id: 'id',
    colors: 'colors',
    sizes: 'sizes',
    product_types: 'product_types'
  };

  export type SanitizationDataOrderByRelevanceFieldEnum = (typeof SanitizationDataOrderByRelevanceFieldEnum)[keyof typeof SanitizationDataOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const VerificationTokenOrderByRelevanceFieldEnum: {
    identifier: 'identifier',
    token: 'token'
  };

  export type VerificationTokenOrderByRelevanceFieldEnum = (typeof VerificationTokenOrderByRelevanceFieldEnum)[keyof typeof VerificationTokenOrderByRelevanceFieldEnum]


  export const ShopifySessionOrderByRelevanceFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    sessionData: 'sessionData'
  };

  export type ShopifySessionOrderByRelevanceFieldEnum = (typeof ShopifySessionOrderByRelevanceFieldEnum)[keyof typeof ShopifySessionOrderByRelevanceFieldEnum]


  export const ShopifyShopOrderByRelevanceFieldEnum: {
    id: 'id',
    shopifyShopId: 'shopifyShopId',
    domain: 'domain',
    name: 'name',
    country: 'country',
    city: 'city',
    storeAccessToken: 'storeAccessToken',
    accessToken: 'accessToken'
  };

  export type ShopifyShopOrderByRelevanceFieldEnum = (typeof ShopifyShopOrderByRelevanceFieldEnum)[keyof typeof ShopifyShopOrderByRelevanceFieldEnum]


  /**
   * Deep Input Types
   */


  export type TemplateClassWhereInput = {
    AND?: Enumerable<TemplateClassWhereInput>
    OR?: Enumerable<TemplateClassWhereInput>
    NOT?: Enumerable<TemplateClassWhereInput>
    id?: IntFilter | number
    class_name?: StringFilter | string
    items?: StringNullableListFilter
    isSet?: BoolFilter | boolean
    submitted?: BoolFilter | boolean
    updated_at?: DateTimeFilter | Date | string
    created_at?: DateTimeFilter | Date | string
  }

  export type TemplateClassOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    class_name?: SortOrder
    items?: SortOrder
    isSet?: SortOrder
    submitted?: SortOrder
    updated_at?: SortOrder
    created_at?: SortOrder
    _relevance?: TemplateClassOrderByRelevanceInput
  }

  export type TemplateClassWhereUniqueInput = {
    id?: number
    class_name?: string
  }

  export type TemplateClassOrderByWithAggregationInput = {
    id?: SortOrder
    class_name?: SortOrder
    items?: SortOrder
    isSet?: SortOrder
    submitted?: SortOrder
    updated_at?: SortOrder
    created_at?: SortOrder
    _count?: TemplateClassCountOrderByAggregateInput
    _avg?: TemplateClassAvgOrderByAggregateInput
    _max?: TemplateClassMaxOrderByAggregateInput
    _min?: TemplateClassMinOrderByAggregateInput
    _sum?: TemplateClassSumOrderByAggregateInput
  }

  export type TemplateClassScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TemplateClassScalarWhereWithAggregatesInput>
    OR?: Enumerable<TemplateClassScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TemplateClassScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    class_name?: StringWithAggregatesFilter | string
    items?: StringNullableListFilter
    isSet?: BoolWithAggregatesFilter | boolean
    submitted?: BoolWithAggregatesFilter | boolean
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatusWhereInput = {
    AND?: Enumerable<StatusWhereInput>
    OR?: Enumerable<StatusWhereInput>
    NOT?: Enumerable<StatusWhereInput>
    id?: IntFilter | number
    updated_at?: DateTimeFilter | Date | string
    products?: IntFilter | number
    business_name?: StringFilter | string
  }

  export type StatusOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    updated_at?: SortOrder
    products?: SortOrder
    business_name?: SortOrder
    _relevance?: StatusOrderByRelevanceInput
  }

  export type StatusWhereUniqueInput = {
    id?: number
    business_name?: string
  }

  export type StatusOrderByWithAggregationInput = {
    id?: SortOrder
    updated_at?: SortOrder
    products?: SortOrder
    business_name?: SortOrder
    _count?: StatusCountOrderByAggregateInput
    _avg?: StatusAvgOrderByAggregateInput
    _max?: StatusMaxOrderByAggregateInput
    _min?: StatusMinOrderByAggregateInput
    _sum?: StatusSumOrderByAggregateInput
  }

  export type StatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatusScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    products?: IntWithAggregatesFilter | number
    business_name?: StringWithAggregatesFilter | string
  }

  export type ShopWhereInput = {
    AND?: Enumerable<ShopWhereInput>
    OR?: Enumerable<ShopWhereInput>
    NOT?: Enumerable<ShopWhereInput>
    id?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    domain?: StringFilter | string
    business_name?: StringFilter | string
    buckets?: StringNullableListFilter
    site_host?: StringNullableFilter | string | null
    vertical?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    site?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    phone?: StringNullableFilter | string | null
    borough?: StringNullableFilter | string | null
    street?: StringNullableFilter | string | null
    city?: StringNullableFilter | string | null
    postal_code?: StringNullableFilter | string | null
    province?: StringNullableFilter | string | null
    country?: StringNullableFilter | string | null
    latitude?: StringNullableFilter | string | null
    longitude?: StringNullableFilter | string | null
    rating?: StringNullableFilter | string | null
    reviews?: StringNullableFilter | string | null
    photo?: StringNullableFilter | string | null
    street_view?: StringNullableFilter | string | null
    working_hours?: JsonNullableFilter
    place_id?: StringNullableFilter | string | null
    banner_image?: StringNullableFilter | string | null
    logo?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    consumer_key?: StringNullableFilter | string | null
    consumer_secret?: StringNullableFilter | string | null
    is_integrated?: StringNullableFilter | string | null
    is_partner?: BoolFilter | boolean
    return_policy?: StringNullableFilter | string | null
  }

  export type ShopOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    created_at?: SortOrder
    domain?: SortOrder
    business_name?: SortOrder
    buckets?: SortOrder
    site_host?: SortOrder
    vertical?: SortOrder
    name?: SortOrder
    site?: SortOrder
    type?: SortOrder
    phone?: SortOrder
    borough?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postal_code?: SortOrder
    province?: SortOrder
    country?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    rating?: SortOrder
    reviews?: SortOrder
    photo?: SortOrder
    street_view?: SortOrder
    working_hours?: SortOrder
    place_id?: SortOrder
    banner_image?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    consumer_key?: SortOrder
    consumer_secret?: SortOrder
    is_integrated?: SortOrder
    is_partner?: SortOrder
    return_policy?: SortOrder
    _relevance?: ShopOrderByRelevanceInput
  }

  export type ShopWhereUniqueInput = {
    id?: number
    domain?: string
  }

  export type ShopOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    domain?: SortOrder
    business_name?: SortOrder
    buckets?: SortOrder
    site_host?: SortOrder
    vertical?: SortOrder
    name?: SortOrder
    site?: SortOrder
    type?: SortOrder
    phone?: SortOrder
    borough?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postal_code?: SortOrder
    province?: SortOrder
    country?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    rating?: SortOrder
    reviews?: SortOrder
    photo?: SortOrder
    street_view?: SortOrder
    working_hours?: SortOrder
    place_id?: SortOrder
    banner_image?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    consumer_key?: SortOrder
    consumer_secret?: SortOrder
    is_integrated?: SortOrder
    is_partner?: SortOrder
    return_policy?: SortOrder
    _count?: ShopCountOrderByAggregateInput
    _avg?: ShopAvgOrderByAggregateInput
    _max?: ShopMaxOrderByAggregateInput
    _min?: ShopMinOrderByAggregateInput
    _sum?: ShopSumOrderByAggregateInput
  }

  export type ShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    domain?: StringWithAggregatesFilter | string
    business_name?: StringWithAggregatesFilter | string
    buckets?: StringNullableListFilter
    site_host?: StringNullableWithAggregatesFilter | string | null
    vertical?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
    site?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    phone?: StringNullableWithAggregatesFilter | string | null
    borough?: StringNullableWithAggregatesFilter | string | null
    street?: StringNullableWithAggregatesFilter | string | null
    city?: StringNullableWithAggregatesFilter | string | null
    postal_code?: StringNullableWithAggregatesFilter | string | null
    province?: StringNullableWithAggregatesFilter | string | null
    country?: StringNullableWithAggregatesFilter | string | null
    latitude?: StringNullableWithAggregatesFilter | string | null
    longitude?: StringNullableWithAggregatesFilter | string | null
    rating?: StringNullableWithAggregatesFilter | string | null
    reviews?: StringNullableWithAggregatesFilter | string | null
    photo?: StringNullableWithAggregatesFilter | string | null
    street_view?: StringNullableWithAggregatesFilter | string | null
    working_hours?: JsonNullableWithAggregatesFilter
    place_id?: StringNullableWithAggregatesFilter | string | null
    banner_image?: StringNullableWithAggregatesFilter | string | null
    logo?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    consumer_key?: StringNullableWithAggregatesFilter | string | null
    consumer_secret?: StringNullableWithAggregatesFilter | string | null
    is_integrated?: StringNullableWithAggregatesFilter | string | null
    is_partner?: BoolWithAggregatesFilter | boolean
    return_policy?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    sh_id?: IntFilter | number
    id?: StringFilter | string
    title?: StringFilter | string
    business_name?: StringNullableFilter | string | null
    url?: StringNullableFilter | string | null
    place_id?: StringNullableFilter | string | null
    handle?: StringNullableFilter | string | null
    vendor?: StringNullableFilter | string | null
    tags?: StringNullableListFilter
    variants?: JsonNullableFilter
    images?: JsonNullableFilter
    options?: JsonNullableFilter
    rating?: IntNullableFilter | number | null
    body_html?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    product_type?: StringNullableFilter | string | null
    published_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    colors?: StringNullableListFilter
    gender?: StringNullableFilter | string | null
    compare_at_price?: IntNullableFilter | number | null
    original_price?: IntNullableFilter | number | null
    sizes?: StringNullableListFilter
    buckets?: StringNullableListFilter
    is_on_sale?: BoolNullableFilter | boolean | null
    sale_ratio?: IntNullableFilter | number | null
    is_available?: BoolNullableFilter | boolean | null
  }

  export type ProductOrderByWithRelationAndSearchRelevanceInput = {
    sh_id?: SortOrder
    id?: SortOrder
    title?: SortOrder
    business_name?: SortOrder
    url?: SortOrder
    place_id?: SortOrder
    handle?: SortOrder
    vendor?: SortOrder
    tags?: SortOrder
    variants?: SortOrder
    images?: SortOrder
    options?: SortOrder
    rating?: SortOrder
    body_html?: SortOrder
    created_at?: SortOrder
    product_type?: SortOrder
    published_at?: SortOrder
    updated_at?: SortOrder
    colors?: SortOrder
    gender?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    sizes?: SortOrder
    buckets?: SortOrder
    is_on_sale?: SortOrder
    sale_ratio?: SortOrder
    is_available?: SortOrder
    _relevance?: ProductOrderByRelevanceInput
  }

  export type ProductWhereUniqueInput = {
    sh_id?: number
    id?: string
    title?: string
  }

  export type ProductOrderByWithAggregationInput = {
    sh_id?: SortOrder
    id?: SortOrder
    title?: SortOrder
    business_name?: SortOrder
    url?: SortOrder
    place_id?: SortOrder
    handle?: SortOrder
    vendor?: SortOrder
    tags?: SortOrder
    variants?: SortOrder
    images?: SortOrder
    options?: SortOrder
    rating?: SortOrder
    body_html?: SortOrder
    created_at?: SortOrder
    product_type?: SortOrder
    published_at?: SortOrder
    updated_at?: SortOrder
    colors?: SortOrder
    gender?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    sizes?: SortOrder
    buckets?: SortOrder
    is_on_sale?: SortOrder
    sale_ratio?: SortOrder
    is_available?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    sh_id?: IntWithAggregatesFilter | number
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    business_name?: StringNullableWithAggregatesFilter | string | null
    url?: StringNullableWithAggregatesFilter | string | null
    place_id?: StringNullableWithAggregatesFilter | string | null
    handle?: StringNullableWithAggregatesFilter | string | null
    vendor?: StringNullableWithAggregatesFilter | string | null
    tags?: StringNullableListFilter
    variants?: JsonNullableWithAggregatesFilter
    images?: JsonNullableWithAggregatesFilter
    options?: JsonNullableWithAggregatesFilter
    rating?: IntNullableWithAggregatesFilter | number | null
    body_html?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    product_type?: StringNullableWithAggregatesFilter | string | null
    published_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    colors?: StringNullableListFilter
    gender?: StringNullableWithAggregatesFilter | string | null
    compare_at_price?: IntNullableWithAggregatesFilter | number | null
    original_price?: IntNullableWithAggregatesFilter | number | null
    sizes?: StringNullableListFilter
    buckets?: StringNullableListFilter
    is_on_sale?: BoolNullableWithAggregatesFilter | boolean | null
    sale_ratio?: IntNullableWithAggregatesFilter | number | null
    is_available?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    password?: StringNullableFilter | string | null
    birthdate?: StringNullableFilter | string | null
    gender?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    role?: StringNullableFilter | string | null
    size?: JsonNullableFilter
    buckets?: StringNullableListFilter
    location?: JsonNullableFilter
    favourite?: JsonNullableFilter
    settings?: JsonNullableFilter
    has_latest_app?: StringNullableFilter | string | null
    age_range?: StringNullableFilter | string | null
    cart_ids?: StringNullableListFilter
    wish_list_ids?: StringNullableListFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    image?: SortOrder
    role?: SortOrder
    size?: SortOrder
    buckets?: SortOrder
    location?: SortOrder
    favourite?: SortOrder
    settings?: SortOrder
    has_latest_app?: SortOrder
    age_range?: SortOrder
    cart_ids?: SortOrder
    wish_list_ids?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    image?: SortOrder
    role?: SortOrder
    size?: SortOrder
    buckets?: SortOrder
    location?: SortOrder
    favourite?: SortOrder
    settings?: SortOrder
    has_latest_app?: SortOrder
    age_range?: SortOrder
    cart_ids?: SortOrder
    wish_list_ids?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    password?: StringNullableWithAggregatesFilter | string | null
    birthdate?: StringNullableWithAggregatesFilter | string | null
    gender?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    role?: StringNullableWithAggregatesFilter | string | null
    size?: JsonNullableWithAggregatesFilter
    buckets?: StringNullableListFilter
    location?: JsonNullableWithAggregatesFilter
    favourite?: JsonNullableWithAggregatesFilter
    settings?: JsonNullableWithAggregatesFilter
    has_latest_app?: StringNullableWithAggregatesFilter | string | null
    age_range?: StringNullableWithAggregatesFilter | string | null
    cart_ids?: StringNullableListFilter
    wish_list_ids?: StringNullableListFilter
  }

  export type SanitizationDataWhereInput = {
    AND?: Enumerable<SanitizationDataWhereInput>
    OR?: Enumerable<SanitizationDataWhereInput>
    NOT?: Enumerable<SanitizationDataWhereInput>
    id?: StringFilter | string
    colors?: StringNullableListFilter
    sizes?: StringNullableListFilter
    product_types?: StringNullableListFilter
  }

  export type SanitizationDataOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    colors?: SortOrder
    sizes?: SortOrder
    product_types?: SortOrder
    _relevance?: SanitizationDataOrderByRelevanceInput
  }

  export type SanitizationDataWhereUniqueInput = {
    id?: string
  }

  export type SanitizationDataOrderByWithAggregationInput = {
    id?: SortOrder
    colors?: SortOrder
    sizes?: SortOrder
    product_types?: SortOrder
    _count?: SanitizationDataCountOrderByAggregateInput
    _max?: SanitizationDataMaxOrderByAggregateInput
    _min?: SanitizationDataMinOrderByAggregateInput
  }

  export type SanitizationDataScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SanitizationDataScalarWhereWithAggregatesInput>
    OR?: Enumerable<SanitizationDataScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SanitizationDataScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    colors?: StringNullableListFilter
    sizes?: StringNullableListFilter
    product_types?: StringNullableListFilter
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationAndSearchRelevanceInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = {
    id?: string
    sessionToken?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionToken?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: Enumerable<VerificationTokenWhereInput>
    OR?: Enumerable<VerificationTokenWhereInput>
    NOT?: Enumerable<VerificationTokenWhereInput>
    identifier?: StringFilter | string
    token?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type VerificationTokenOrderByWithRelationAndSearchRelevanceInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _relevance?: VerificationTokenOrderByRelevanceInput
  }

  export type VerificationTokenWhereUniqueInput = {
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
  }

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationTokenScalarWhereWithAggregatesInput>
    identifier?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    expires?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShopifySessionWhereInput = {
    AND?: Enumerable<ShopifySessionWhereInput>
    OR?: Enumerable<ShopifySessionWhereInput>
    NOT?: Enumerable<ShopifySessionWhereInput>
    id?: StringFilter | string
    sessionId?: StringFilter | string
    sessionData?: StringFilter | string
  }

  export type ShopifySessionOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionData?: SortOrder
    _relevance?: ShopifySessionOrderByRelevanceInput
  }

  export type ShopifySessionWhereUniqueInput = {
    id?: string
    sessionId?: string
  }

  export type ShopifySessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionData?: SortOrder
    _count?: ShopifySessionCountOrderByAggregateInput
    _max?: ShopifySessionMaxOrderByAggregateInput
    _min?: ShopifySessionMinOrderByAggregateInput
  }

  export type ShopifySessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopifySessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopifySessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopifySessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    sessionId?: StringWithAggregatesFilter | string
    sessionData?: StringWithAggregatesFilter | string
  }

  export type ShopifyShopWhereInput = {
    AND?: Enumerable<ShopifyShopWhereInput>
    OR?: Enumerable<ShopifyShopWhereInput>
    NOT?: Enumerable<ShopifyShopWhereInput>
    id?: StringFilter | string
    shopifyShopId?: StringFilter | string
    domain?: StringFilter | string
    name?: StringFilter | string
    country?: StringFilter | string
    city?: StringFilter | string
    storeAccessToken?: StringFilter | string
    accessToken?: StringFilter | string
    onboardingCompleted?: BoolFilter | boolean
    onboardingInfoCompleted?: BoolFilter | boolean
    termsAccepted?: BoolFilter | boolean
  }

  export type ShopifyShopOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    shopifyShopId?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    storeAccessToken?: SortOrder
    accessToken?: SortOrder
    onboardingCompleted?: SortOrder
    onboardingInfoCompleted?: SortOrder
    termsAccepted?: SortOrder
    _relevance?: ShopifyShopOrderByRelevanceInput
  }

  export type ShopifyShopWhereUniqueInput = {
    id?: string
    shopifyShopId?: string
    domain?: string
    accessToken?: string
  }

  export type ShopifyShopOrderByWithAggregationInput = {
    id?: SortOrder
    shopifyShopId?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    storeAccessToken?: SortOrder
    accessToken?: SortOrder
    onboardingCompleted?: SortOrder
    onboardingInfoCompleted?: SortOrder
    termsAccepted?: SortOrder
    _count?: ShopifyShopCountOrderByAggregateInput
    _max?: ShopifyShopMaxOrderByAggregateInput
    _min?: ShopifyShopMinOrderByAggregateInput
  }

  export type ShopifyShopScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShopifyShopScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShopifyShopScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShopifyShopScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    shopifyShopId?: StringWithAggregatesFilter | string
    domain?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    storeAccessToken?: StringWithAggregatesFilter | string
    accessToken?: StringWithAggregatesFilter | string
    onboardingCompleted?: BoolWithAggregatesFilter | boolean
    onboardingInfoCompleted?: BoolWithAggregatesFilter | boolean
    termsAccepted?: BoolWithAggregatesFilter | boolean
  }

  export type TemplateClassCreateInput = {
    class_name: string
    items?: TemplateClassCreateitemsInput | Enumerable<string>
    isSet: boolean
    submitted: boolean
    updated_at?: Date | string
    created_at?: Date | string
  }

  export type TemplateClassUncheckedCreateInput = {
    id?: number
    class_name: string
    items?: TemplateClassCreateitemsInput | Enumerable<string>
    isSet: boolean
    submitted: boolean
    updated_at?: Date | string
    created_at?: Date | string
  }

  export type TemplateClassUpdateInput = {
    class_name?: StringFieldUpdateOperationsInput | string
    items?: TemplateClassUpdateitemsInput | Enumerable<string>
    isSet?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_name?: StringFieldUpdateOperationsInput | string
    items?: TemplateClassUpdateitemsInput | Enumerable<string>
    isSet?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateClassCreateManyInput = {
    id?: number
    class_name: string
    items?: TemplateClassCreateitemsInput | Enumerable<string>
    isSet: boolean
    submitted: boolean
    updated_at?: Date | string
    created_at?: Date | string
  }

  export type TemplateClassUpdateManyMutationInput = {
    class_name?: StringFieldUpdateOperationsInput | string
    items?: TemplateClassUpdateitemsInput | Enumerable<string>
    isSet?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TemplateClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    class_name?: StringFieldUpdateOperationsInput | string
    items?: TemplateClassUpdateitemsInput | Enumerable<string>
    isSet?: BoolFieldUpdateOperationsInput | boolean
    submitted?: BoolFieldUpdateOperationsInput | boolean
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusCreateInput = {
    updated_at?: Date | string
    products: number
    business_name: string
  }

  export type StatusUncheckedCreateInput = {
    id?: number
    updated_at?: Date | string
    products: number
    business_name: string
  }

  export type StatusUpdateInput = {
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: IntFieldUpdateOperationsInput | number
    business_name?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: IntFieldUpdateOperationsInput | number
    business_name?: StringFieldUpdateOperationsInput | string
  }

  export type StatusCreateManyInput = {
    id?: number
    updated_at?: Date | string
    products: number
    business_name: string
  }

  export type StatusUpdateManyMutationInput = {
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: IntFieldUpdateOperationsInput | number
    business_name?: StringFieldUpdateOperationsInput | string
  }

  export type StatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: IntFieldUpdateOperationsInput | number
    business_name?: StringFieldUpdateOperationsInput | string
  }

  export type ShopCreateInput = {
    created_at?: Date | string
    domain: string
    business_name: string
    buckets?: ShopCreatebucketsInput | Enumerable<string>
    site_host?: string | null
    vertical?: string | null
    name?: string | null
    site?: string | null
    type?: string | null
    phone?: string | null
    borough?: string | null
    street?: string | null
    city?: string | null
    postal_code?: string | null
    province?: string | null
    country?: string | null
    latitude?: string | null
    longitude?: string | null
    rating?: string | null
    reviews?: string | null
    photo?: string | null
    street_view?: string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: string | null
    banner_image?: string | null
    logo?: string | null
    email?: string | null
    consumer_key?: string | null
    consumer_secret?: string | null
    is_integrated?: string | null
    is_partner?: boolean
    return_policy?: string | null
  }

  export type ShopUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    domain: string
    business_name: string
    buckets?: ShopCreatebucketsInput | Enumerable<string>
    site_host?: string | null
    vertical?: string | null
    name?: string | null
    site?: string | null
    type?: string | null
    phone?: string | null
    borough?: string | null
    street?: string | null
    city?: string | null
    postal_code?: string | null
    province?: string | null
    country?: string | null
    latitude?: string | null
    longitude?: string | null
    rating?: string | null
    reviews?: string | null
    photo?: string | null
    street_view?: string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: string | null
    banner_image?: string | null
    logo?: string | null
    email?: string | null
    consumer_key?: string | null
    consumer_secret?: string | null
    is_integrated?: string | null
    is_partner?: boolean
    return_policy?: string | null
  }

  export type ShopUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: StringFieldUpdateOperationsInput | string
    business_name?: StringFieldUpdateOperationsInput | string
    buckets?: ShopUpdatebucketsInput | Enumerable<string>
    site_host?: NullableStringFieldUpdateOperationsInput | string | null
    vertical?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    site?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    borough?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    street_view?: NullableStringFieldUpdateOperationsInput | string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    banner_image?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_key?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_secret?: NullableStringFieldUpdateOperationsInput | string | null
    is_integrated?: NullableStringFieldUpdateOperationsInput | string | null
    is_partner?: BoolFieldUpdateOperationsInput | boolean
    return_policy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: StringFieldUpdateOperationsInput | string
    business_name?: StringFieldUpdateOperationsInput | string
    buckets?: ShopUpdatebucketsInput | Enumerable<string>
    site_host?: NullableStringFieldUpdateOperationsInput | string | null
    vertical?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    site?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    borough?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    street_view?: NullableStringFieldUpdateOperationsInput | string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    banner_image?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_key?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_secret?: NullableStringFieldUpdateOperationsInput | string | null
    is_integrated?: NullableStringFieldUpdateOperationsInput | string | null
    is_partner?: BoolFieldUpdateOperationsInput | boolean
    return_policy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopCreateManyInput = {
    id?: number
    created_at?: Date | string
    domain: string
    business_name: string
    buckets?: ShopCreatebucketsInput | Enumerable<string>
    site_host?: string | null
    vertical?: string | null
    name?: string | null
    site?: string | null
    type?: string | null
    phone?: string | null
    borough?: string | null
    street?: string | null
    city?: string | null
    postal_code?: string | null
    province?: string | null
    country?: string | null
    latitude?: string | null
    longitude?: string | null
    rating?: string | null
    reviews?: string | null
    photo?: string | null
    street_view?: string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: string | null
    banner_image?: string | null
    logo?: string | null
    email?: string | null
    consumer_key?: string | null
    consumer_secret?: string | null
    is_integrated?: string | null
    is_partner?: boolean
    return_policy?: string | null
  }

  export type ShopUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: StringFieldUpdateOperationsInput | string
    business_name?: StringFieldUpdateOperationsInput | string
    buckets?: ShopUpdatebucketsInput | Enumerable<string>
    site_host?: NullableStringFieldUpdateOperationsInput | string | null
    vertical?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    site?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    borough?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    street_view?: NullableStringFieldUpdateOperationsInput | string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    banner_image?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_key?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_secret?: NullableStringFieldUpdateOperationsInput | string | null
    is_integrated?: NullableStringFieldUpdateOperationsInput | string | null
    is_partner?: BoolFieldUpdateOperationsInput | boolean
    return_policy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShopUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    domain?: StringFieldUpdateOperationsInput | string
    business_name?: StringFieldUpdateOperationsInput | string
    buckets?: ShopUpdatebucketsInput | Enumerable<string>
    site_host?: NullableStringFieldUpdateOperationsInput | string | null
    vertical?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    site?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    borough?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    province?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableStringFieldUpdateOperationsInput | string | null
    longitude?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableStringFieldUpdateOperationsInput | string | null
    reviews?: NullableStringFieldUpdateOperationsInput | string | null
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    street_view?: NullableStringFieldUpdateOperationsInput | string | null
    working_hours?: NullableJsonNullValueInput | InputJsonValue
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    banner_image?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_key?: NullableStringFieldUpdateOperationsInput | string | null
    consumer_secret?: NullableStringFieldUpdateOperationsInput | string | null
    is_integrated?: NullableStringFieldUpdateOperationsInput | string | null
    is_partner?: BoolFieldUpdateOperationsInput | boolean
    return_policy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductCreateInput = {
    id: string
    title: string
    business_name?: string | null
    url?: string | null
    place_id?: string | null
    handle?: string | null
    vendor?: string | null
    tags?: ProductCreatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    body_html?: string | null
    created_at?: Date | string
    product_type?: string | null
    published_at?: Date | string
    updated_at?: Date | string
    colors?: ProductCreatecolorsInput | Enumerable<string>
    gender?: string | null
    compare_at_price?: number | null
    original_price?: number | null
    sizes?: ProductCreatesizesInput | Enumerable<string>
    buckets?: ProductCreatebucketsInput | Enumerable<string>
    is_on_sale?: boolean | null
    sale_ratio?: number | null
    is_available?: boolean | null
  }

  export type ProductUncheckedCreateInput = {
    sh_id?: number
    id: string
    title: string
    business_name?: string | null
    url?: string | null
    place_id?: string | null
    handle?: string | null
    vendor?: string | null
    tags?: ProductCreatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    body_html?: string | null
    created_at?: Date | string
    product_type?: string | null
    published_at?: Date | string
    updated_at?: Date | string
    colors?: ProductCreatecolorsInput | Enumerable<string>
    gender?: string | null
    compare_at_price?: number | null
    original_price?: number | null
    sizes?: ProductCreatesizesInput | Enumerable<string>
    buckets?: ProductCreatebucketsInput | Enumerable<string>
    is_on_sale?: boolean | null
    sale_ratio?: number | null
    is_available?: boolean | null
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    business_name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    handle?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ProductUpdatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    body_html?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colors?: ProductUpdatecolorsInput | Enumerable<string>
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    compare_at_price?: NullableIntFieldUpdateOperationsInput | number | null
    original_price?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: ProductUpdatesizesInput | Enumerable<string>
    buckets?: ProductUpdatebucketsInput | Enumerable<string>
    is_on_sale?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sale_ratio?: NullableIntFieldUpdateOperationsInput | number | null
    is_available?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductUncheckedUpdateInput = {
    sh_id?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    business_name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    handle?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ProductUpdatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    body_html?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colors?: ProductUpdatecolorsInput | Enumerable<string>
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    compare_at_price?: NullableIntFieldUpdateOperationsInput | number | null
    original_price?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: ProductUpdatesizesInput | Enumerable<string>
    buckets?: ProductUpdatebucketsInput | Enumerable<string>
    is_on_sale?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sale_ratio?: NullableIntFieldUpdateOperationsInput | number | null
    is_available?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductCreateManyInput = {
    sh_id?: number
    id: string
    title: string
    business_name?: string | null
    url?: string | null
    place_id?: string | null
    handle?: string | null
    vendor?: string | null
    tags?: ProductCreatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: number | null
    body_html?: string | null
    created_at?: Date | string
    product_type?: string | null
    published_at?: Date | string
    updated_at?: Date | string
    colors?: ProductCreatecolorsInput | Enumerable<string>
    gender?: string | null
    compare_at_price?: number | null
    original_price?: number | null
    sizes?: ProductCreatesizesInput | Enumerable<string>
    buckets?: ProductCreatebucketsInput | Enumerable<string>
    is_on_sale?: boolean | null
    sale_ratio?: number | null
    is_available?: boolean | null
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    business_name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    handle?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ProductUpdatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    body_html?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colors?: ProductUpdatecolorsInput | Enumerable<string>
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    compare_at_price?: NullableIntFieldUpdateOperationsInput | number | null
    original_price?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: ProductUpdatesizesInput | Enumerable<string>
    buckets?: ProductUpdatebucketsInput | Enumerable<string>
    is_on_sale?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sale_ratio?: NullableIntFieldUpdateOperationsInput | number | null
    is_available?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductUncheckedUpdateManyInput = {
    sh_id?: IntFieldUpdateOperationsInput | number
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    business_name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    place_id?: NullableStringFieldUpdateOperationsInput | string | null
    handle?: NullableStringFieldUpdateOperationsInput | string | null
    vendor?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: ProductUpdatetagsInput | Enumerable<string>
    variants?: NullableJsonNullValueInput | InputJsonValue
    images?: NullableJsonNullValueInput | InputJsonValue
    options?: NullableJsonNullValueInput | InputJsonValue
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    body_html?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    product_type?: NullableStringFieldUpdateOperationsInput | string | null
    published_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    colors?: ProductUpdatecolorsInput | Enumerable<string>
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    compare_at_price?: NullableIntFieldUpdateOperationsInput | number | null
    original_price?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: ProductUpdatesizesInput | Enumerable<string>
    buckets?: ProductUpdatebucketsInput | Enumerable<string>
    is_on_sale?: NullableBoolFieldUpdateOperationsInput | boolean | null
    sale_ratio?: NullableIntFieldUpdateOperationsInput | number | null
    is_available?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    birthdate?: string | null
    gender?: string | null
    image?: string | null
    role?: string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserCreatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: string | null
    age_range?: string | null
    cart_ids?: UserCreatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserCreatewish_list_idsInput | Enumerable<string>
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    birthdate?: string | null
    gender?: string | null
    image?: string | null
    role?: string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserCreatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: string | null
    age_range?: string | null
    cart_ids?: UserCreatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserCreatewish_list_idsInput | Enumerable<string>
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
    sessions?: SessionUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    birthdate?: string | null
    gender?: string | null
    image?: string | null
    role?: string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserCreatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: string | null
    age_range?: string | null
    cart_ids?: UserCreatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserCreatewish_list_idsInput | Enumerable<string>
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
  }

  export type SanitizationDataCreateInput = {
    id?: string
    colors?: SanitizationDataCreatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataCreatesizesInput | Enumerable<string>
    product_types?: SanitizationDataCreateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataUncheckedCreateInput = {
    id?: string
    colors?: SanitizationDataCreatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataCreatesizesInput | Enumerable<string>
    product_types?: SanitizationDataCreateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: SanitizationDataUpdatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataUpdatesizesInput | Enumerable<string>
    product_types?: SanitizationDataUpdateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: SanitizationDataUpdatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataUpdatesizesInput | Enumerable<string>
    product_types?: SanitizationDataUpdateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataCreateManyInput = {
    id?: string
    colors?: SanitizationDataCreatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataCreatesizesInput | Enumerable<string>
    product_types?: SanitizationDataCreateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: SanitizationDataUpdatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataUpdatesizesInput | Enumerable<string>
    product_types?: SanitizationDataUpdateproduct_typesInput | Enumerable<string>
  }

  export type SanitizationDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    colors?: SanitizationDataUpdatecolorsInput | Enumerable<string>
    sizes?: SanitizationDataUpdatesizesInput | Enumerable<string>
    product_types?: SanitizationDataUpdateproduct_typesInput | Enumerable<string>
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShopifySessionCreateInput = {
    id?: string
    sessionId: string
    sessionData: string
  }

  export type ShopifySessionUncheckedCreateInput = {
    id?: string
    sessionId: string
    sessionData: string
  }

  export type ShopifySessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionData?: StringFieldUpdateOperationsInput | string
  }

  export type ShopifySessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionData?: StringFieldUpdateOperationsInput | string
  }

  export type ShopifySessionCreateManyInput = {
    id?: string
    sessionId: string
    sessionData: string
  }

  export type ShopifySessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionData?: StringFieldUpdateOperationsInput | string
  }

  export type ShopifySessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    sessionData?: StringFieldUpdateOperationsInput | string
  }

  export type ShopifyShopCreateInput = {
    id?: string
    shopifyShopId: string
    domain: string
    name: string
    country: string
    city: string
    storeAccessToken: string
    accessToken: string
    onboardingCompleted?: boolean
    onboardingInfoCompleted?: boolean
    termsAccepted?: boolean
  }

  export type ShopifyShopUncheckedCreateInput = {
    id?: string
    shopifyShopId: string
    domain: string
    name: string
    country: string
    city: string
    storeAccessToken: string
    accessToken: string
    onboardingCompleted?: boolean
    onboardingInfoCompleted?: boolean
    termsAccepted?: boolean
  }

  export type ShopifyShopUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyShopId?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    storeAccessToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    onboardingInfoCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopifyShopUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyShopId?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    storeAccessToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    onboardingInfoCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopifyShopCreateManyInput = {
    id?: string
    shopifyShopId: string
    domain: string
    name: string
    country: string
    city: string
    storeAccessToken: string
    accessToken: string
    onboardingCompleted?: boolean
    onboardingInfoCompleted?: boolean
    termsAccepted?: boolean
  }

  export type ShopifyShopUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyShopId?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    storeAccessToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    onboardingInfoCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShopifyShopUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyShopId?: StringFieldUpdateOperationsInput | string
    domain?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    storeAccessToken?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    onboardingCompleted?: BoolFieldUpdateOperationsInput | boolean
    onboardingInfoCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TemplateClassOrderByRelevanceInput = {
    fields: Enumerable<TemplateClassOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type TemplateClassCountOrderByAggregateInput = {
    id?: SortOrder
    class_name?: SortOrder
    items?: SortOrder
    isSet?: SortOrder
    submitted?: SortOrder
    updated_at?: SortOrder
    created_at?: SortOrder
  }

  export type TemplateClassAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TemplateClassMaxOrderByAggregateInput = {
    id?: SortOrder
    class_name?: SortOrder
    isSet?: SortOrder
    submitted?: SortOrder
    updated_at?: SortOrder
    created_at?: SortOrder
  }

  export type TemplateClassMinOrderByAggregateInput = {
    id?: SortOrder
    class_name?: SortOrder
    isSet?: SortOrder
    submitted?: SortOrder
    updated_at?: SortOrder
    created_at?: SortOrder
  }

  export type TemplateClassSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StatusOrderByRelevanceInput = {
    fields: Enumerable<StatusOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type StatusCountOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    products?: SortOrder
    business_name?: SortOrder
  }

  export type StatusAvgOrderByAggregateInput = {
    id?: SortOrder
    products?: SortOrder
  }

  export type StatusMaxOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    products?: SortOrder
    business_name?: SortOrder
  }

  export type StatusMinOrderByAggregateInput = {
    id?: SortOrder
    updated_at?: SortOrder
    products?: SortOrder
    business_name?: SortOrder
  }

  export type StatusSumOrderByAggregateInput = {
    id?: SortOrder
    products?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type ShopOrderByRelevanceInput = {
    fields: Enumerable<ShopOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ShopCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    domain?: SortOrder
    business_name?: SortOrder
    buckets?: SortOrder
    site_host?: SortOrder
    vertical?: SortOrder
    name?: SortOrder
    site?: SortOrder
    type?: SortOrder
    phone?: SortOrder
    borough?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postal_code?: SortOrder
    province?: SortOrder
    country?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    rating?: SortOrder
    reviews?: SortOrder
    photo?: SortOrder
    street_view?: SortOrder
    working_hours?: SortOrder
    place_id?: SortOrder
    banner_image?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    consumer_key?: SortOrder
    consumer_secret?: SortOrder
    is_integrated?: SortOrder
    is_partner?: SortOrder
    return_policy?: SortOrder
  }

  export type ShopAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShopMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    domain?: SortOrder
    business_name?: SortOrder
    site_host?: SortOrder
    vertical?: SortOrder
    name?: SortOrder
    site?: SortOrder
    type?: SortOrder
    phone?: SortOrder
    borough?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postal_code?: SortOrder
    province?: SortOrder
    country?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    rating?: SortOrder
    reviews?: SortOrder
    photo?: SortOrder
    street_view?: SortOrder
    place_id?: SortOrder
    banner_image?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    consumer_key?: SortOrder
    consumer_secret?: SortOrder
    is_integrated?: SortOrder
    is_partner?: SortOrder
    return_policy?: SortOrder
  }

  export type ShopMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    domain?: SortOrder
    business_name?: SortOrder
    site_host?: SortOrder
    vertical?: SortOrder
    name?: SortOrder
    site?: SortOrder
    type?: SortOrder
    phone?: SortOrder
    borough?: SortOrder
    street?: SortOrder
    city?: SortOrder
    postal_code?: SortOrder
    province?: SortOrder
    country?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    rating?: SortOrder
    reviews?: SortOrder
    photo?: SortOrder
    street_view?: SortOrder
    place_id?: SortOrder
    banner_image?: SortOrder
    logo?: SortOrder
    email?: SortOrder
    consumer_key?: SortOrder
    consumer_secret?: SortOrder
    is_integrated?: SortOrder
    is_partner?: SortOrder
    return_policy?: SortOrder
  }

  export type ShopSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type ProductOrderByRelevanceInput = {
    fields: Enumerable<ProductOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ProductCountOrderByAggregateInput = {
    sh_id?: SortOrder
    id?: SortOrder
    title?: SortOrder
    business_name?: SortOrder
    url?: SortOrder
    place_id?: SortOrder
    handle?: SortOrder
    vendor?: SortOrder
    tags?: SortOrder
    variants?: SortOrder
    images?: SortOrder
    options?: SortOrder
    rating?: SortOrder
    body_html?: SortOrder
    created_at?: SortOrder
    product_type?: SortOrder
    published_at?: SortOrder
    updated_at?: SortOrder
    colors?: SortOrder
    gender?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    sizes?: SortOrder
    buckets?: SortOrder
    is_on_sale?: SortOrder
    sale_ratio?: SortOrder
    is_available?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    sh_id?: SortOrder
    rating?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    sale_ratio?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    sh_id?: SortOrder
    id?: SortOrder
    title?: SortOrder
    business_name?: SortOrder
    url?: SortOrder
    place_id?: SortOrder
    handle?: SortOrder
    vendor?: SortOrder
    rating?: SortOrder
    body_html?: SortOrder
    created_at?: SortOrder
    product_type?: SortOrder
    published_at?: SortOrder
    updated_at?: SortOrder
    gender?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    is_on_sale?: SortOrder
    sale_ratio?: SortOrder
    is_available?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    sh_id?: SortOrder
    id?: SortOrder
    title?: SortOrder
    business_name?: SortOrder
    url?: SortOrder
    place_id?: SortOrder
    handle?: SortOrder
    vendor?: SortOrder
    rating?: SortOrder
    body_html?: SortOrder
    created_at?: SortOrder
    product_type?: SortOrder
    published_at?: SortOrder
    updated_at?: SortOrder
    gender?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    is_on_sale?: SortOrder
    sale_ratio?: SortOrder
    is_available?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    sh_id?: SortOrder
    rating?: SortOrder
    compare_at_price?: SortOrder
    original_price?: SortOrder
    sale_ratio?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: Enumerable<UserOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    image?: SortOrder
    role?: SortOrder
    size?: SortOrder
    buckets?: SortOrder
    location?: SortOrder
    favourite?: SortOrder
    settings?: SortOrder
    has_latest_app?: SortOrder
    age_range?: SortOrder
    cart_ids?: SortOrder
    wish_list_ids?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    image?: SortOrder
    role?: SortOrder
    has_latest_app?: SortOrder
    age_range?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    image?: SortOrder
    role?: SortOrder
    has_latest_app?: SortOrder
    age_range?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type SanitizationDataOrderByRelevanceInput = {
    fields: Enumerable<SanitizationDataOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SanitizationDataCountOrderByAggregateInput = {
    id?: SortOrder
    colors?: SortOrder
    sizes?: SortOrder
    product_types?: SortOrder
  }

  export type SanitizationDataMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SanitizationDataMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: Enumerable<SessionOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenOrderByRelevanceInput = {
    fields: Enumerable<VerificationTokenOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type ShopifySessionOrderByRelevanceInput = {
    fields: Enumerable<ShopifySessionOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ShopifySessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionData?: SortOrder
  }

  export type ShopifySessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionData?: SortOrder
  }

  export type ShopifySessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    sessionData?: SortOrder
  }

  export type ShopifyShopOrderByRelevanceInput = {
    fields: Enumerable<ShopifyShopOrderByRelevanceFieldEnum>
    sort: SortOrder
    search: string
  }

  export type ShopifyShopCountOrderByAggregateInput = {
    id?: SortOrder
    shopifyShopId?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    storeAccessToken?: SortOrder
    accessToken?: SortOrder
    onboardingCompleted?: SortOrder
    onboardingInfoCompleted?: SortOrder
    termsAccepted?: SortOrder
  }

  export type ShopifyShopMaxOrderByAggregateInput = {
    id?: SortOrder
    shopifyShopId?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    storeAccessToken?: SortOrder
    accessToken?: SortOrder
    onboardingCompleted?: SortOrder
    onboardingInfoCompleted?: SortOrder
    termsAccepted?: SortOrder
  }

  export type ShopifyShopMinOrderByAggregateInput = {
    id?: SortOrder
    shopifyShopId?: SortOrder
    domain?: SortOrder
    name?: SortOrder
    country?: SortOrder
    city?: SortOrder
    storeAccessToken?: SortOrder
    accessToken?: SortOrder
    onboardingCompleted?: SortOrder
    onboardingInfoCompleted?: SortOrder
    termsAccepted?: SortOrder
  }

  export type TemplateClassCreateitemsInput = {
    set: Enumerable<string>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type TemplateClassUpdateitemsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShopCreatebucketsInput = {
    set: Enumerable<string>
  }

  export type ShopUpdatebucketsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProductCreatetagsInput = {
    set: Enumerable<string>
  }

  export type ProductCreatecolorsInput = {
    set: Enumerable<string>
  }

  export type ProductCreatesizesInput = {
    set: Enumerable<string>
  }

  export type ProductCreatebucketsInput = {
    set: Enumerable<string>
  }

  export type ProductUpdatetagsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdatecolorsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdatesizesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProductUpdatebucketsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserCreatebucketsInput = {
    set: Enumerable<string>
  }

  export type UserCreatecart_idsInput = {
    set: Enumerable<string>
  }

  export type UserCreatewish_list_idsInput = {
    set: Enumerable<string>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdatebucketsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserUpdatecart_idsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserUpdatewish_list_idsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SessionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type SanitizationDataCreatecolorsInput = {
    set: Enumerable<string>
  }

  export type SanitizationDataCreatesizesInput = {
    set: Enumerable<string>
  }

  export type SanitizationDataCreateproduct_typesInput = {
    set: Enumerable<string>
  }

  export type SanitizationDataUpdatecolorsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SanitizationDataUpdatesizesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SanitizationDataUpdateproduct_typesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    search?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    sessionToken?: StringFilter | string
    userId?: StringFilter | string
    expires?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    birthdate?: string | null
    gender?: string | null
    image?: string | null
    role?: string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserCreatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: string | null
    age_range?: string | null
    cart_ids?: UserCreatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserCreatewish_list_idsInput | Enumerable<string>
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    password?: string | null
    birthdate?: string | null
    gender?: string | null
    image?: string | null
    role?: string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserCreatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: string | null
    age_range?: string | null
    cart_ids?: UserCreatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserCreatewish_list_idsInput | Enumerable<string>
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableJsonNullValueInput | InputJsonValue
    buckets?: UserUpdatebucketsInput | Enumerable<string>
    location?: NullableJsonNullValueInput | InputJsonValue
    favourite?: NullableJsonNullValueInput | InputJsonValue
    settings?: NullableJsonNullValueInput | InputJsonValue
    has_latest_app?: NullableStringFieldUpdateOperationsInput | string | null
    age_range?: NullableStringFieldUpdateOperationsInput | string | null
    cart_ids?: UserUpdatecart_idsInput | Enumerable<string>
    wish_list_ids?: UserUpdatewish_list_idsInput | Enumerable<string>
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}